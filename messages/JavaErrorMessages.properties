#AndroidStudio3.1 \u65E5\u672C\u8A9E\u5316\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8
#Tue Nov 21 21:52:21 JST 2017
abstract.cannot.be.instantiated='' {0} ''は抽象です。
abstract.method.in.non.abstract.class=非抽象クラスにおける抽象メソッド
abstract.methods.cannot.have.a.body=抽象メソッドはボディを持つことはできません
ambiguous.method.call=あいまいなメソッド呼び出し： '' {0} ''と '' {1} ''が一致します
ambiguous.method.html.tooltip=<html><body><table border\=0><tr><td colspan\={0}>Ambiguous method call. Both</td></tr><tr>{1}<td>in <b>{2}</b>\nbsp;and</td></tr><tr>{3}<td>in <b>{4}</b>\nbsp;match</td></tr></table></body></html>
ambiguous.reference='' {0} ''への参照はあいまいです。 '' {1} ''と '' {2} ''の両方が一致しています
annotation.annotation.type.expected=注釈タイプが必要です
annotation.container.bad.type=無効なコンテナ注釈 '' {0} ''： ''値 ''メソッドの型は '' {1} ''
annotation.container.low.retention=コンテナアノテーション '' {0} ''は、含まれているアノテーションよりも保持時間が短い（ '' {1} ''）
annotation.container.no.value=無効なコンテナアノテーション '' {0} ''： ''値 ''メソッドが宣言されていません
annotation.container.not.applicable=コンテナ注釈 '@ {0}'は{1}には適用されません
annotation.container.wide.target=コンテナアノテーションのターゲット '' {0} ''はこのアノテーションのターゲットのサブセットではありません
annotation.container.wrong.place=コンテナアノテーション '' {0} ''は含まれている要素と同時に存在してはいけません
annotation.cyclic.element.type=周期的注釈要素タイプ
annotation.duplicate.annotation=重複する注釈
annotation.duplicate.attribute=重複する属性 '' {0} ''
annotation.duplicate.explained=アノテーションが重複しています。 
annotation.illegal.array.initializer='' {0} 'の初期化子が正しくありません
annotation.interface.members.may.not.have.parameters=@interfaceメンバにはパラメータはありません
annotation.invalid.annotation.member.type=注釈メンバ '' {0} ''が無効です
annotation.may.not.have.extends.list=@interfaceは拡張リストを持たないかもしれません
annotation.may.not.have.type.parameters=@interfaceは型パラメータを持たないかもしれません
annotation.members.may.not.have.throws.list=@interfaceメンバーはスローリストを持たないかもしれません
annotation.missing.attribute=必要な場合は{0}が不足しています
annotation.missing.method=メソッド '' {0} ''が見つかりません
annotation.name.is.missing=注釈属性は 'name \= value'の形式でなければなりません
annotation.non.class.literal.attribute.value=属性値はクラスリテラルでなければなりません
annotation.non.constant.attribute.value=属性値は一定でなければならない
annotation.non.enum.constant.attribute.value=属性値はenum定数でなければなりません
annotation.non.repeatable='' {0} ''の宣言に有効なjava.lang.annotation.Repeatableアノテーションがありません
annotation.not.allowed.class=クラスのリテラルタイプに注釈を付けることはできません
annotation.not.allowed.here=注釈はここでは許可されません
annotation.not.allowed.ref=注釈はこの種の参照には適用されません
annotation.not.allowed.static=静的メンバー適格型に注釈を付けることはできません
annotation.not.allowed.void='void'型に注釈を付けることはできません
annotation.not.applicable='' @ {0} 'は{1}には適用されません
annotation.target.ANNOTATION_TYPE=アノテーションタイプ
annotation.target.CONSTRUCTOR=コンストラクタ
annotation.target.FIELD=フィールド
annotation.target.LOCAL_VARIABLE=ローカル変数
annotation.target.METHOD=方法
annotation.target.MODULE=モジュール
annotation.target.PACKAGE=パッケージ
annotation.target.PARAMETER=パラメータ
annotation.target.TYPE=タイプ
annotation.target.TYPE_PARAMETER=タイプパラメータ
annotation.target.TYPE_USE=タイプ使用
annotation.unknown.method=メソッド '' {0} 'を解決できません
argument.mismatch.html.tooltip=<html><body><table border\=0><tr><td><b>{1}</b></td>{3}<td colspan\={0}>in <b>{2}</b>\nbsp;cannot be applied</td></tr><tr><td>to</td>{4}</tr></table>{5}</body></html>
array.initializer.not.allowed=配列イニシャライザはここでは使用できません
array.type.expected=予想される配列タイプ。
assignment.to.final.variable=最終変数 '' {0} 'に値を代入できません
bad.qualifier.in.super.method.reference=デフォルト・スーパー・コールの不良タイプ修飾子：{0}
binary.numbers.must.contain.at.least.one.hexadecimal.digit=2進数には少なくとも1つの2進数が含まれていなければなりません
binary.operator.not.applicable=演算子 '' {0} ''は '' {1} ''、 '' {2} ''には適用できません
bound.not.expected=予期しない境界
break.outside.switch.or.loop=スイッチまたはループの外部で切断する
call.to.super.is.not.allowed.in.enum.constructor=superへの呼び出しはenumコンストラクタでは許可されていません
cannot.be.referenced.from.static.context='' {0} ''は静的コンテキストから参照できません
cannot.resolve.constructor=コンストラクタ '' {0} ''を解決できません
cannot.resolve.method=メソッド '' {0} 'を解決できません
cannot.resolve.package=パッケージ{0}を解決できません
cannot.resolve.symbol=シンボル '' {0} 'を解決できません
cannot.select.dot.class.from.type.variable=型変数から選択できません
case.statement.outside.switch=switch文のcase文
catch.without.try='試し'なしの 'キャッチ'
clash.methods.message='' {0} ''は '' {1} ''と衝突します
clash.methods.message.show.classes='' {2} 'の' {0} '' '' {3} 'の' '{1}' 'との衝突
class.already.imported='' {0} ''はこのコンパイル単位で既に定義されています
class.cannot.extend.multiple.classes=クラスは複数のクラスを拡張できません
class.cannot.inherit.from.its.type.parameter=クラスは型パラメータから継承できません
class.clashes.with.package=クラス '' {0} ''は同じ名前のパッケージと衝突します
class.expected=クラス名はここに期待
class.is.already.defined.in.single.static.import=クラス '' {0} ''は既に1つの静的インポートで定義されています
class.is.ambiguous.in.single.static.import=クラス '' {0} ''は1回の静的インポートで曖昧です
class.is.not.used=クラス '' {0} 'は使用されません
class.must.be.abstract=クラス '' {0} ''は抽象宣言するか、 '' {2} ''の抽象メソッド '' {1} ''を実装する必要があります
class.name.expected=クラス名が必要です
classes.extends.enum=クラスは直接 'java.lang.Enum'を拡張することはできません
constant.expression.required=定数式が必要
constructor.call.must.be.first.statement='' {0} ''への呼び出しは、コンストラクタ本体の最初の文でなければなりません
constructor.is.not.used=コンストラクタ '' {0} ''は使用されません
continue.outside.loop=ループの外側で続行する
cyclic.inheritance='' {0} ''を含む循環継承
declaration.not.allowed=宣言はここで許可されていません
declaration.or.variable.expected=宣言、最終的または効果的な最終的な変数の期待
deprecated.symbol='' {0} 'は非推奨です
direct.abstract.method.access=抽象メソッド '' {0} 'に直接アクセスすることはできません
dot.expected.after.super.or.this='。'
duplicate.class=重複するクラス： '' {0} ''
duplicate.class.in.other.file=ファイル '' {0} ''に重複したクラスが見つかりました
duplicate.default.switch.label=重複するデフォルトラベル
duplicate.label=ラベル '' {0} ''は既に使用中です
duplicate.method='' {0} ''は既に '' {1} ''に定義されています
duplicate.switch.label=重複したラベル '' {0} ''
else.without.if='else'を除いて 'if'
empty.character.literal=空の文字リテラル
enum.constant.should.implement.method=クラス '' {0} 'は、' '{2}' 'に抽象メソッド' '{1}'を実装する必要があります
enum.types.cannot.be.instantiated=列挙型はインスタンス化できません
error.cannot.resolve.class=クラス '' {0} 'を解決できません
error.cannot.resolve.class.or.package=クラスまたはパッケージ '' {0} 'を解決できません
exception.already.caught=例外 '' {0} ''は既に捕捉されています
exception.already.caught.warn=Unreachable section\: {1, choice, 0\#exception|2\#exceptions} ''{0}'' {1, choice, 0\#has|2\#have} already been caught
exception.is.never.thrown=メソッド内で '{0}'がスローされない例外
exception.must.be.disjoint=マルチキャッチでの型は互いに素でなければなりません： '' {0} ''は{'{1}'のサブクラスです
exception.never.thrown.try=例外 '' {0} ''は対応するtryブロックにスローされません
expected.array.initializer=配列初期化子が必要です
expected.boolean.expression=ブール式が期待される
expected.catch.or.finally='キャッチ'または '最終的に'期待
expected.class.or.interface='class'または 'interface'が必要です
expected.class.or.package=予想されるクラスまたはパッケージ
expected.class.reference=クラス参照が必要です
expected.colon='：'は期待しています
expected.comma='、'予想通り
expected.comma.or.rparen='、'または '）'が必要です
expected.comma.or.semicolon='、'または ';'
expected.dot='。'
expected.eq='\='が必要です
expected.expression=表現が期待される
expected.gt='>'が必要です。
expected.gt.or.comma='>'または '、'が必要です
expected.identifier=識別子が必要です
expected.identifier.or.type=予想される識別子またはタイプ
expected.lbrace='{'予想
expected.lbrace.or.semicolon='{'または ';'
expected.lbracket='['予想
expected.lparen='（'予想通り
expected.lparen.or.lbracket='（'または '[' expected
expected.module.declaration=モジュール宣言が必要です
expected.module.statement=モジュールのステートメントが必要です
expected.package.reference=パッケージ参照が必要です
expected.parameter=パラメータが必要です
expected.rbrace='}'期待
expected.rbracket=']'予想通り
expected.resource=リソース定義が必要です
expected.rparen='）'予想
expected.semicolon=';'
expected.statement=ステートメントが期待される
expected.type=タイプが期待される
expected.type.parameter=期待されるタイプのパラメータ
expected.value=予想される値
expected.while='期待している間に'
expected.with='with'が期待される
expression.expected=表現が期待される
extends.after.enum=enumに許されるextends節はありません
extension.method.in.class=拡張メソッドはインタフェース内でのみ使用できます
extension.method.should.have.a.body=拡張メソッドはボディを持つ必要があります
feature.annotations=注釈
feature.binary.literals=バイナリリテラル
feature.diamond.types=ダイヤモンドの種類
feature.extension.methods=拡張メソッド
feature.for.each=各ループに対して
feature.generics=ジェネリックス
feature.hex.fp.literals=16進浮動小数点リテラル
feature.lambda.expressions=ラムダ式
feature.method.references=メソッド参照
feature.modules=モジュール
feature.multi.catch=マルチキャッチ
feature.static.imports=静的なインポート
feature.try.with.resources=リソースを試してみる
feature.try.with.resources.refs=リソース参照
feature.type.annotations=アノテーションを入力
feature.type.receivers=受信機パラメータ
feature.underscores.in.literals=リテラルの下線
feature.varargs=可変アリティメソッド
field.is.already.defined.in.single.static.import=フィールド '' {0} ''は既に1つの静的インポートで定義されています
field.is.ambiguous.in.single.static.import=フィールド '' {0} ''は1つの静的インポートで曖昧です
field.is.not.used=フィールド '' {0} 'は使用されません
final.method.override='' {0} 'は' '{2}' 'の' '{1}' 'を上書きできません。
finally.without.try='finally'を 'try'なしで
floating.point.number.too.large=浮動小数点数が大きすぎます
floating.point.number.too.small=浮動小数点数が小さすぎる
foreach.not.applicable=foreachは型 '' {0} 'には適用されません
generic.array.creation=汎用配列の作成
generic.extend.exception=ジェネリッククラスは 'java.lang.Throwable'を拡張することはできません
generics.annotation.members.may.not.have.type.parameters=@interfaceメンバは型パラメータを持たないかもしれません
generics.cannot.be.inherited.with.different.type.arguments='' {0} ''は異なる型引数で継承できません： '' {1} ''、 '' {2} ''
generics.cannot.catch.type.parameters=型パラメータをキャッチできません
generics.cannot.instanceof.type.parameters=クラスまたは配列が必要です
generics.diamond.not.applicable=ダイヤモンド演算子は、パラメータ化されていない型には適用されません。
generics.duplicate.type.parameter=重複した型パラメータ： '' {0} ''
generics.enum.may.not.have.type.parameters=列挙型は型パラメータを持たないかもしれない
generics.holder.method=方法
generics.holder.type=タイプ
generics.inferred.type.for.type.parameter.is.not.within.its.bound.extend=型パラメータ '' {0} ''の推定型 '' {2} ''がその範囲内にありません。 
generics.inferred.type.for.type.parameter.is.not.within.its.bound.implement=型パラメータ '' {0} ''の推定型 '' {2} ''がその範囲内にありません。 
generics.methods.have.same.erasure={0};
generics.methods.have.same.erasure.hide={0};
generics.methods.have.same.erasure.override={0};
generics.reference.parameters.not.allowed=参照パラメータはここでは許可されません
generics.select.static.class.from.parameterized.type=パラメータ化された型から静的なクラス '' {0} ''を選択できません
generics.type.argument.cannot.be.of.primitive.type=型引数はプリミティブ型ではありません
generics.type.arguments.on.raw.method=rawメソッドで指定された型引数
generics.type.arguments.on.raw.type=生の型に与えられた型引数
generics.type.or.method.does.not.have.type.parameters={0} '' {1} ''に型パラメータはありません
generics.type.parameter.cannot.be.instantiated=型パラメータ '' {0} ''は直接インスタンス化できません
generics.type.parameter.is.not.within.its.bound.extend=型パラメータ '' {0} ''はその範囲内にありません。 
generics.type.parameter.is.not.within.its.bound.implement=型パラメータ '' {0} ''はその範囲内にありません。 
generics.unchecked.assignment=未確認の割り当て： '' {0} 'から' '{1}' 'へ
generics.unchecked.call=チェックされていないメソッド '' {0} ''の呼び出し
generics.unchecked.call.to.member.of.raw.type=未加工のタイプ '' {1} ''のメンバーとしての '' {0} ''への未確認呼び出し
generics.unchecked.cast=チェックされていないキャスト： '' {0} 'から' '{1}' 'へ
generics.wildcard.not.expected=ワイルドカードが必要ない
generics.wildcards.may.be.used.only.as.reference.parameters=ワイルドカードは参照パラメータとしてのみ使用できます
generics.wrong.number.of.type.arguments=タイプ引数の数が間違っています：{0}。
hexadecimal.numbers.must.contain.at.least.one.hexadecimal.digit=16進数には少なくとも1つの16進数を含める必要があります
illegal.escape.character.in.character.literal=文字リテラルの不正なエスケープ文字
illegal.escape.character.in.string.literal=文字列リテラルの不正なエスケープ文字
illegal.forward.reference=不正な転送参照
illegal.generic.type.for.instanceof=instanceofの不正なジェネリック型
illegal.initializer='' {0} 'の初期化子が正しくありません
illegal.line.end.in.character.literal=文字リテラルの行末が正しくありません
illegal.line.end.in.string.literal=文字列リテラルの不正な行末
illegal.self.reference=不正な自己参照
illegal.to.access.static.member.from.enum.constructor.or.instance.initializer=enumコンストラクタまたはインスタンス初期化子から静的メンバー '' {0} ''にアクセスすることは不正です
illegal.type.void=違法タイプ： 'void'
illegal.underscore=違法なアンダースコア
implements.after.interface=インタフェースにはimplements節は使用できません
import.statement.identifier.or.asterisk.expected.=識別子または '*'が必要です
inaccessible.type='' {0} ''はここにアクセスできません
incompatible.call.types=Wrong {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} argument type. Found\: ''{2}'', required\: ''{1}''
incompatible.modifiers=修飾子の組み合わせが不正です： '' {0} ''、 '' {1} ''
incompatible.return.type=互換性のない戻り値の型を使用しようとしています
incompatible.types=互換性のない型。
incompatible.types.html.tooltip=<html><body>Incompatible types.<table><tr><td>Required\:</td><td>{0}</td>{1}</tr><tr><td>Found\:</td><td>{2}</td>{3}</tr></table></body></html>
inconvertible.type.cast=変換できない型。 
inheritance.from.final.class=最後の '' {0} ''から継承できません
initializer.must.be.able.to.complete.normally=イニシャライザは正常に完了できる必要があります
instance.method.cannot.override.static.method='' {1} ''のインスタンスメソッド '' {0} ''は '' {3} ''の静的メソッド '' {2} ''
insufficient.language.level={0}はこの言語レベルではサポートされていません
integer.number.too.large=整数が大きすぎます
interface.cannot.be.local=インターフェイスはここでは許可されてい
interface.expected=インターフェイスはここに期待
interface.methods.cannot.have.body=インタフェースメソッドはボディを持つことができません
invalid.package.annotation.containing.file=パッケージの注釈は、ファイルpackage-info.javaになければなりません。
invalid.qualified.new=修飾された新しい無効な
invalid.statement=無効な文
is.not.an.enclosing.class='' {0} ''は囲むクラスではありません
javadoc.exception.tag.class.is.not.throwable=クラス{0}はThrowableの子孫ではありません
javadoc.exception.tag.exception.class.expected=例外クラスが必要です
javadoc.exception.tag.exception.is.not.thrown={0}はメソッド{1}によってスローされると宣言されていません
javadoc.exception.tag.wrong.tag.value=間違ったタグ値
javadoc.param.tag.parameter.name.expected=パラメーター名が必要です
javadoc.param.tag.type.parameter.gt.expected='>'は期待されています
javadoc.param.tag.type.parameter.name.expected=タイプパラメータ名が必要です
javadoc.value.field.required=@valueタグはフィールドを参照する必要があります
javadoc.value.field.with.initializer.required=@valueタグは定数初期化子を持つフィールドを参照する必要があります
javadoc.value.static.field.required=@valueタグは静的フィールドを参照する必要があります
javadoc.value.tag.jdk15.required=JDK 1.4以前を使用している場合、@valueタグには引数がありません。
label.without.statement=ステートメントなしのラベル
lambda.variable.must.be.final=ラムダ式で使用される変数は、最終的または効果的に最終的なものでなければなりません
local.class.is.not.used=ローカルクラス '' {0} 'は使用されません
local.enum=列挙型はローカルであってはならない
local.variable.is.never.used=変数 '' {0} 'は使用されません
local.variable.is.not.assigned=変数 '' {0} 'は割り当てられません
local.variable.is.not.used.for.reading=変数 '' {0} 'は割り当てられていますがアクセスされません
long.number.too.large=長い番号が大きすぎます
malformed.floating.point.literal=不正な形式の浮動小数点リテラル
member.referenced.before.constructor.called=スーパータイプコンストラクタが呼び出される前に '' {0} ''を参照することはできません
method.call.expected=メソッド呼び出しが必要です
method.does.not.override.super=メソッドはそのスーパークラスのメソッドをオーバーライドしません
method.is.not.used=メソッド '' {0} ''は使用されません
missing.method.body=メソッド本体が見つからないか、抽象を宣言しています
missing.package.statement=パッケージ文がありません： '' {0} ''
missing.return.statement=返信文がありません
missing.return.type=無効なメソッド宣言。
missing.return.value=戻り値がありません
modifier.not.allowed=修飾子 '' {0} ''はここでは許可されていません
modifiers.for.enum.constants=enum定数に変更子は使用できません
module.ambiguous=あいまいなモジュール参照：{0}
module.conflicting.packages=パッケージ '' {0} ''は別のモジュールに存在します：{1}
module.conflicting.reads=モジュール '' {0} ''は '' {2} ''と '' {3} ''の両方からパッケージ '' {1} ''を読み取ります
module.cyclic.dependence=巡回依存関係：{0}
module.duplicate.exports=複製 ''エクスポート ''：{0}
module.duplicate.exports.target=複製 ''エクスポート ''ターゲット：{0}
module.duplicate.impl=重複した実装：{0}
module.duplicate.opens=重複した「開く」：{0}
module.duplicate.opens.target=重複した「開く」ターゲット：{0}
module.duplicate.provides=重複した ''は{'を提供します：{0}
module.duplicate.requires=重複する ''が必要です ''：{0}
module.duplicate.uses=Duplicate '' uses ''：{0}
module.file.duplicate='module-info.java'はすでにモジュールに存在しています
module.file.wrong.location=モジュール宣言は、モジュールのソースルートに配置する必要があります
module.file.wrong.name=モジュール宣言は、 'module-info.java'という名前のファイルになければなりません
module.no.package=モジュールファイルは 'package'ステートメントを持つべきではありません
module.not.found=モジュールが見つかりません：{0}
module.not.in.requirements=モジュール '' {0} ''は要件のモジュール '' {1} ''を持っていません
module.not.on.path=モジュールは依存関係にありません：{0}
module.open.duplicate.text=複製する
module.opens.in.weak.module=オープンしているモジュールで 'opens'は許可されていません
module.package.not.exported=モジュール '' {0} ''はパッケージ '' {1} ''をモジュール '' {2} ''にエクスポートしません
module.package.on.classpath=名前付きモジュールは名前のないパッケージにアクセスできません
module.service.abstract=サービス実装は抽象クラスです：{0}
module.service.alien=サービスの実装は、provideディレクティブと同じモジュールで定義する必要があります
module.service.enum=サービス定義は列挙型です：{0}
module.service.impl=サービス実装型は、サービスインタフェース型のサブタイプであるか、public static no-args 'provider'メソッドを持たなければなりません
module.service.inner=サービス実装は内部クラスです：{0}
module.service.no.ctor=サービスの実装には、パブリックのデフォルトコンストラクタ{0}がありません。
module.service.provider.type=''プロバイダ ''メソッドの戻り値の型は、サービスインタフェースの型のサブタイプでなければなりません：{0}
module.service.unused=提供されているがエクスポートまたは使用されていないサービスインターフェイス
native.methods.cannot.have.a.body=ネイティブメソッドはボディを持つことはできません
no.default.constructor.available='' {0} ''にはデフォルトのコンストラクタはありません
no.enclosing.instance.in.scope=型 '' {0} ''の囲むインスタンスはスコープにありません
no.interface.expected=ここにインタフェースは期待しない
non.static.symbol.referenced.from.static.context=非静的{0} '' {1} ''は静的コンテキストから参照できません
not.a.statement=声明ではない
not.allowed.in.interface=インタフェースでは許可されていません
not.loop.label=ループラベルではありません： '' {0} ''
numeric.overflow.in.expression=式の数値のオーバーフロー
overridden.method.does.not.throw={0};
override.not.allowed.in.interfaces=インターフェイスメソッドを実装する際に@Overrideを使用することはできません
overrides.deprecated.method='' {0} ''の廃止されたメソッドをオーバーライドします
package.clashes.with.class=パッケージ '' {0} ''は同じ名前のクラスと衝突します
package.is.empty=パッケージが空です：{0}
package.local.symbol='' {0} 'は' '{1}' 'には公開されていません。
package.name.file.path.mismatch=パッケージ名 '' {0} ''はファイルパス '' {1} ''に対応していません
package.not.found=パッケージが見つかりません：{0}
parameter.is.not.used=パラメータ '' {0} 'は使用されません
private.constructor.is.not.used=プライベートコンストラクタ '{0}'は使用されません
private.field.is.not.assigned=プライベートフィールド '' {0} 'は割り当てられません
private.field.is.not.used=プライベートフィールド '' {0} 'は使用されません
private.field.is.not.used.for.reading=プライベートフィールド '' {0} 'は割り当てられていますがアクセスされていません
private.inner.class.is.not.used=プライベート内部クラス '' {0} 'は使用されません
private.inner.interface.is.not.used=プライベート内部インターフェイス '' {0} ''は使用されません
private.method.is.not.used=プライベートメソッド '' {0} 'は使用されません
private.symbol='' {0} 'は' '{1}' 'にプライベートアクセス権を持っています
protected.symbol='' {0} ''は{1} ''のアクセスを保護しています
public.class.should.be.named.after.file=クラス '' {0} ''はパブリックであり、 '' {0} .java ''というファイルで宣言する必要があります
qualified.enum.constant.in.switch=列挙型スイッチのラベル​​は、列挙定数の修飾されていない名前でなければなりません
qualified.new.of.static.class=静的クラスの修飾された新しい
qualifier.must.be.expression=修飾子は式でなければなりません
receiver.name.mismatch=受信者の名前が囲むクラスの種類と一致しません
receiver.static.context=レシーバは静的コンテキストでは使用できません
receiver.type.mismatch=受信者の種類が囲むクラスの種類と一致しません
receiver.wrong.context=レシーバはメソッドパラメータリストの外部では許可されません
receiver.wrong.position=受信機は最初のパラメータでなければなりません
recursive.constructor.invocation=再帰的コンストラクタ呼び出し
repeated.annotation.target=繰り返されるアノテーションのターゲット
resource.variable.must.be.final=リソースの試行リソースとして使用される変数は、最終的または効果的に最終的なものでなければなりません
return.from.void.method=結果の型がvoidのメソッドから値を返すことはできません
return.outside.method=メソッドの外側に戻る
single.import.class.conflict='' {0} ''はすでに単一タイプのインポートで定義されています
statement.must.be.prepended.with.case.label=ステートメントにはケースラベルが付加されていなければなりません
static.declaration.in.inner.class=内部クラスは静的宣言を持つことはできません
static.member.accessed.via.instance.reference=インスタンス参照によってアクセスされた静的メンバー '' {0}。{1} ''
static.method.cannot.override.instance.method='' {1} ''の静的メソッド '' {0} ''は '' {3} ''のインスタンスメソッド '' {2} ''をオーバーライドできません
string.expected=文字列リテラルが必要です
suspicious.name.assignment='' {0} ''は '' {1} ''に割り当てられていないはずです
suspicious.name.parameter='' {0} ''はおそらくパラメータ '' {1} ''として渡されるべきではありません
suspicious.name.return='' {0} ''はおそらくメソッド '' {1} ''から返されるべきではありません
switch.colon.expected.after.case.label='：'は期待しています
too.many.characters.in.character.literal=文字リテラルに多すぎる文字
type.parameter.cannot.be.followed.by.other.bounds=型パラメータの後に他の境界を付けることはできません
type.parameter.is.not.used=タイプパラメータ '' {0} ''は使用されません
unary.operator.not.applicable=オペレータ '' {0} ''は '' {1} ''に適用できません
unchecked.overriding.incompatible.return.type=チェックされていないオーバーライド：戻り値の型は未チェックの変換が必要です。 
unclosed.char.literal=閉じられていない文字リテラル
unclosed.comment=閉鎖されていないコメント
underscore.identifier.error=Java 9以降、 ''はキーワードであり、識別子として使用することはできません
underscore.identifier.warn=識別子として ''を使用すると、Java 8以降のリリースでサポートされない場合があります
underscore.lambda.identifier=ラムダパラメータ名として ''を使用することはできません
unexpected.identifier=予期しない識別子
unexpected.token=予期しないトークン
unexpected.tokens=予想外のトークン
unhandled.close.exceptions=Unhandled {1, choice, 0\#exception|2\#exceptions} from {2}\: {0}
unhandled.exceptions=Unhandled {1, choice, 0\#exception|2\#exceptions}\: {0}
unknown.class=不明なクラス： '' {0} ''
unqualified.super.disallowed=拡張メソッドでは、修飾されていないスーパーリファレンスは使用できません
unreachable.statement=到達不能声明
unrelated.overriding.methods.return.types=メソッドには関係のない戻り値の型があります
unresolved.label=未定義ラベル： '' {0} ''
valid.switch.17.selector.types=char、byte、short、int、Character、Byte、Short、Integer、String、またはenum
valid.switch.selector.types=byte、char、shortまたはint
vararg.not.last.parameter=Varargパラメータはリストの最後にする必要があります
variable.already.assigned=変数 '' {0} ''はすでに割り当てられている可能性があります
variable.already.defined=変数 '' {0} ''はスコープ内ですでに定義されています
variable.assigned.in.loop=変数 '' {0} ''がループ内で割り当てられる可能性があります
variable.expected=予想される変数
variable.must.be.final=変数 '' {0} ''は内部クラスからアクセスされ、最終宣言する必要があります
variable.must.be.final.or.effectively.final=変数 '' {0} ''は内部クラスからアクセスされ、最終的に、または効果的に最終的になる必要があります
variable.not.initialized=変数 '' {0} ''は初期化されていない可能性があります
visibility.access.problem='' {1} ''の '{0}'にアクセスできません
void.type.is.not.allowed='void'型はここでは許可されません
weaker.privileges={0};
wildcard.not.expected=予期しないワイルドカード
wildcard.type.cannot.be.instantiated=ワイルドカード型 '' {0} ''を直接インスタンス化することはできません
wrong.constructor.arguments='' {0} ''を '' {1} ''に適用できません
wrong.method.arguments='' {1} ''の{0} ''は '' {2} ''に適用できません
