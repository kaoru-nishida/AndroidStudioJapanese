#AndroidStudio3.1 \u65E5\u672C\u8A9E\u5316\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8
#Tue Nov 21 21:52:20 JST 2017
Specify=the output path in Configure Project.
action.compile.description.module=モジュール '' {0} ''
action.compile.description.selected.files=選択したファイル
action.compiler.properties.text=コンパイラのプロパティ
action.description.package.file=対応する成果物のファイルを更新する
action.make.selected.modules.text=選択したモジュールをビルドする
action.name.exclude.from.validation=検証から除外
action.name.package.file=パッケージファイル
action.name.package.files=パッケージファイル
actions.exclude.from.compile.text=コンパイルから除外
add.notnull.assertions=非ヌルアノテートのメソッドとパラメータのランタイムアサーションを追加する
artifact.type.plain=その他
bad.resource.patterns.dialog.title=不正なリソースパターン
build.artifacts.before.run.description.empty=成果物を構築する
build.artifacts.before.run.description.multiple={0}アーティファクトを構築する
build.artifacts.before.run.description.single=ビルド '' {0} ''アーティファクト
build.artifacts.before.run.selector.title=成果物の選択
chooser.description.select.output.directory.for.0.artifact='' {0} ''アーティファクトの出力ディレクトリを選択してください
command.name.package.file=パッケージファイル
compile.progress.title=進行状況をコンパイルする
compiler.configurable.display.name=コンパイラ
compiler.content.name.compile=リビルド
compiler.content.name.make=ビルド
compiler.eclipse.name=Eclipse
compiler.error.exception=エラー：{0}
compiler.error.failed.to.delete={0}を削除できませんでした
compiler.javac.name=ジャバク
compiler.ref.service.validation.progress.text=後方参照インデックスの検証
compiler.ref.service.validation.task.name=後方参照インデックス検証
compiler.results.export.text.prefix=行（{0}）
compiler.running.dialog.title=コンパイラの実行
dialog.title.choose.artifacts=アーティファクトを選択
dialog.title.output.directory.for.artifact=アーティファクトの出力ディレクトリ
eclipse.options.group.title=Eclipseオプション
element.type.name.archive=アーカイブ
element.type.name.artifact=アーティファクト
element.type.name.directory=ディレクトリ
element.type.name.library.files=ライブラリファイル
element.type.name.module.output=モジュール出力
element.type.name.module.test.output=モジュールテスト出力
error.ant.files.backup.failed=ファイル{0}のバックアップに失敗しました
error.ant.files.generate.failed=Antビルドスクリプトの生成に失敗しました：{0}
error.bad.class.file.format=不正なクラスのファイル形式：
error.bad.resource.patterns=次のリソースパターンが不正です：{0}
error.chunk.modules.must.have.same.jdk=次のモジュールは、それらの間の循環的な依存関係のため、同じJDKが割り当てられている必要があります。
error.chunk.modules.must.have.same.language.level=以下のモジュールは、それらの間に循環的な依存関係があるため、同じ言語レベルが割り当てられている必要があります。
error.compiler.configurable.malformed.patterns=次のリソースパターンが不正です。
error.compiler.internal.error=コンパイラの内部エラー。
error.copying={0}コピーエラー
error.failed.to.create.directory=ディレクトリ{0}の作成に失敗しました
error.javac.out.of.memory=メモリ不足。
error.jdk.not.specified=Cannot start compiler\: the SDK is not specified for {0,choice, 1\#module|2\#modules
error.output.not.specified=Cannot start compilation\: the output path is not specified for {0,choice, 1\#module|2\#modules
exclude.from.compile.table.path.column.name=パス
exclude.from.compile.table.recursively.column.name=再帰的に
file.copying.compiler.description=ファイルコピーコンパイラ
generate.ant.build.custom.compiler.conflict.message=<html>The chunks listed below use more then one custom compiler.<br/>for them you will need to resolve conflict between<br/>compilers manually. The compilation task will also contain<br/>the fail task.<ul>{0}</ul></html>
generate.ant.build.custom.compiler.conflict.message.row=<li>{0}</li>
generate.ant.build.custom.compiler.conflict.title=チャンクのカスタムコンパイラの競合
generate.ant.build.dialog.cyclic.modules.table.description=いくつかのモジュールは循環依存性を持っています。
generate.ant.build.dialog.cyclic.modules.table.name.column.header=メインモジュール
generate.ant.build.dialog.cyclic.modules.table.number.column.header=サイクル
generate.ant.build.dialog.cyclic.modules.table.title=サイクリックモジュールの依存関係
generate.ant.build.progress.message=蟻のビルドを生成...
generate.ant.build.title=Antビルドを生成する
generated.ant.build.bootclasspath.comment=コンパイル時に含まれるパスbootclasspath
generated.ant.build.build.all.modules.target.name=すべてのモジュールを構築する
generated.ant.build.build.all.target.name=すべてを構築する
generated.ant.build.building.concrete.module.section.title=モジュール{0}
generated.ant.build.clean.all.task.comment=すべてをクリーンアップする
generated.ant.build.cleanup.module.task.comment=クリーンアップモジュール
generated.ant.build.compile.modules.fail.custom.compilers=カスタムコンパイラ間の競合は手動で解決する必要があります。
generated.ant.build.compile.modules.main.target.comment=Compile {0,choice, 1\#module|2\#modules} {1}
generated.ant.build.compile.modules.production.classes.target.comment=Compile {0,choice, 1\#module|2\#modules} {1}; production classes
generated.ant.build.compile.modules.tests.target.comment=compile {0,choice, 1\#module|2\#modules} {1}; test classes
generated.ant.build.compiler.options.comment=コンパイラオプション
generated.ant.build.custom.compilers.comment=カスタムコンパイラTaskdefsの登録
generated.ant.build.disable.tests.property.comment=テストのコンパイルが必要ない場合は、次のプロパティのコメントを外します。
generated.ant.build.global.libraries.comment=グローバルライブラリ
generated.ant.build.initialization.section.comment=このターゲットでビルド初期化を実行する
generated.ant.build.initialization.section.title=ビルド初期化
generated.ant.build.jdk.definitions.comment=JDKの定義
generated.ant.build.modules.section.title=モジュール
generated.ant.build.project.libraries.comment=プロジェクトライブラリ
java.compiler.description=Javaコンパイラ
java.compiler.option.additional.command.line.parameters=追加のコマンドラインパラメータ：
java.compiler.option.generate.debugging.info=デバッグ情報を生成する
java.compiler.option.generate.no.warnings=警告を生成しない
java.compiler.option.prefer.target.jdk.compiler=可能であれば、モジュールターゲットJDKのコンパイラを使用する
java.compiler.option.report.deprecated=推奨されなくなった機能の使用を報告する
javac.error.jdk.home.missing=JDK '' {0} ''のホームディレクトリ '' {1} ''を見つけることができません。
javac.error.unknown.jdk.version=JDK {0}のバージョンを判別できません。
javac.option.max.heap.size=最大ヒープサイズ（MB）：
javac.options.group.title=Javacのオプション
label.generate.ant.script.backup.files=以前に生成されたファイルをバックアップする
label.generate.ant.script.enable.ui.forms.compilation=UIフォームのコンパイルを有効にする（IDEAディストリビューションの「javac2」antタスクが必要）
label.generate.ant.script.filename=出力ファイル名：
label.generate.ant.script.generate.idea.home=idea.homeプロパティに現在のIDEAインスタンスを使用する
label.generate.ant.script.generate.multiple.files=複数ファイルのant buildを生成する（ant 1.6以降で実行する必要がある）
label.generate.ant.script.inline.runtime.classpaths=インラインランタイムクラスパス
label.generate.ant.script.overwrite.files=以前に生成されたファイルを上書きする
label.generate.ant.script.single.file=単一ファイルのAntビルドを生成する
label.generate.ant.script.use.jdk.definitions=プロジェクトファイルからJDK定義を使用する
label.option.autoshow.first.error=エディタで自動的に最初のエラーを表示する
label.option.clear.output.directory.on.rebuild=リビルド時に出力ディレクトリを消去する
label.option.compile.in.background=バックグラウンドでコンパイルする
label.option.display.notification.popup=ビルド完了通知を表示する
label.option.resource.patterns.text=リソースパターン：
label.text.class.path=クラスパス：
label.text.main.class=メインクラス：
mesage.text.deployment.descriptor.file.not.exist=デプロイメント記述子ファイル '' {0} ''は存在しません
message.ant.files.generated.ok=Antビルドファイルが正常に生成されました：
message.category.error=エラー
message.category.information=情報
message.category.statistics=統計
message.category.warning=警告
message.resource.patterns.format.changed=リソースパターンの形式が変更されました。
message.tect.package.file.io.error=IOエラー：
message.text.compiling.item.deployment.descriptor.could.not.be.found={0}のコンパイル：展開項目 '' {1} ''が見つかりませんでした
message.text.compiling.module.message={0}をコンパイルする：{1}
message.text.deployment.description.invalid.file=無効なファイル
message.text.destination.is.directory={0}宛先はディレクトリです。
message.text.error.copying.file.to.file='' {0} ''を '' {1} ''にコピー中にエラーが発生しました。
message.text.xml.file.invalid=XMLファイル '' {0} ''は無効です
no.excludes=除外なし
no.validators=有効なバリデータはありません
node.text.0.compile.output='' {0} ''コンパイル出力
node.text.0.directory.content='' {0} ''ディレクトリの内容
node.text.0.test.compile.output='' {0} ''テストコンパイル出力
node.text.0.with.dependencies='' {0} ''に依存関係があります
option.use.compiler.text=コンパイラを使用する：
packaging.element.text.output.root=<output root>
pattern.conversion.dialog.title=パターン変換
progress.checking.dependencies=依存関係のチェック中...
progress.compiling.class={0}をコンパイルしています...
progress.executing.postcompile.tasks=ポストコンパイルタスクの実行...
progress.executing.precompile.tasks=プレコンパイルタスクの実行...
progress.found.dependent.files={0}個の依存ファイルが見つかりました
progress.loading.classes=クラスの読み込み中...
progress.parsing.file={0}の解析中...
progress.updating.caches=キャッシュの更新中...
rebuild.lvcs.label.no.errors=''エラーがない{0} ''
rebuild.lvcs.label.with.errors='' {0} ''にエラーがあります
resource.compiler.description=リソースコンパイラ
rmi.compiler.description=RMIコンパイラ
rmic.option.enable.rmi.stubs=RMIスタブの生成を有効にする
rmic.option.generate.iiop.stubs=IIOPスタブを生成する
statistics.error.count={0} {0,choice, 0\#errors|1\#error|2\#errors}
statistics.files.classes=ファイル：{0}  - クラス：{1}
statistics.warnings.count={0} {0,choice, 0\#warnings|1\#warning|2\#warnings}
status.all.up.to.date=すべてのファイルが最新です
status.compilation.aborted=編集が中止されました
status.compilation.completed.successfully=コンパイルが正常に完了しました
status.compilation.completed.successfully.with.warnings=Compilation completed successfully with {0} {0,choice, 0\#warnings|1\#warning|2\#warnings}
status.compilation.completed.successfully.with.warnings.and.errors=Compilation completed with {0} {0,choice, 0\#errors|1\#error|2\#errors} and {1} {1,choice, 0\#warnings|1\#warning|2\#warnings}
status.text.file.has.been.packaged={0, choice, 1\#File|2\#Files} {1} {0, choice, 1\#has|2\#have} been packaged at {2}.
validation.display.name=検証
value.undefined=未定義
warning.compiler.running.on.project.close=コンパイラが実行中です。
warning.compiler.running.on.toolwindow.close=コンパイラが実行中です。
warning.sources.under.output.paths=コンパイラオプション "再構築時に出力ディレクトリを消去する"は現在オンです。
warning.text.file.has.been.changed=コンパイル中にファイルが変更され、検査の検証がスキップされました
}={1}.
