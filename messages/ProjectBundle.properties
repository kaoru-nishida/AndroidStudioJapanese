#AndroidStudio3.1 \u65E5\u672C\u8A9E\u5316\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8
#Tue Nov 21 21:52:21 JST 2017
Are=you sure you want to delete all selected libraries?
No=files will be deleted.
action.description.remove.packaging.elements=選択した要素を削除する
action.name.extract.artifact=アーティファクトを抽出...
action.name.facet.navigate=ナビゲートする
action.name.inline.artifact=インラインアーティファクト
action.name.remove.packaging.element=削除する
action.name.rename.packaging.element=名前を変更する
add.action.name=新しく追加する ...
add.external.annotations.path.description=モジュールソースの外部注釈が配置されているパスを選択します。
add.external.annotations.path.title=外部注釈へのパスを追加する
add.group.framework.separator=フレームワーク
add.new.global.library.text=新しいグローバルライブラリ
add.new.header.text=追加
add.new.jdk.text=新しいSDKを追加
add.new.module.text.full=モジュール
add.new.project.library.text=新しいプロジェクトライブラリ
artifact.source.items.tree.tooltip=<html>Double-click on element to put into default location<br>Drag-and-drop element to add into the desired location<br>More actions are available in the popup menu</html>
artifacts.add.copy.action=コピーを追加する
artifacts.create.action={0}を作成する
banner.slogan.artifact.0=アーティファクト{0} ''
button.add=追加
button.remove=削除する
button.text.attach.files=添付ファイルまたはディレクトリ...
button.text.ignore.selected=選択を無視する
button.text.keep.all=すべて保ちます
button.text.remove.selected=削除選択
checkbox.text.build.on.make=プロジェクトビルドに含める
choose.modules.dialog.description=ライブラリ '' {0} ''が選択されたモジュールに追加されます。
choose.modules.dialog.title=モジュールを選択
class.file.decompiled.text=コンパイルされた.classファイル
class.file.open.source.action=オープンソースファイル
classpath.add.library.action=としょうかん...
classpath.add.module.dependency.action=モジュールの依存関係...
classpath.add.new.library.action=新しい図書館...
classpath.add.simple.module.library.action=JARまたはディレクトリ...
classpath.chooser.description.add.module.dependency=現在のモジュールが依存するモジュールを選択します。
classpath.chooser.title.add.module.dependency=モジュールを選択
classpath.message.library.already.added=ライブラリ '' {0} ''は既にこのモジュールに追加されています
classpath.panel.analyze=分析する
classpath.panel.navigate.action.text=ナビゲートする
classpath.title.adding.dependency=依存関係の追加
combobox.item.global.library=グローバルライブラリ
combobox.item.module.library=モジュールライブラリ
combobox.item.project.library=プロジェクトライブラリ
confirmation.message.would.you.like.to.ignore.facet=ファセット '' {0} ''をモジュール '' {1} ''から無視しますか？
copy.module.dialog.title=コピーモジュール
dependencies.used.in.popup.title=で使われる
dialog.title.add.framework.0.support={0}サポートを追加
dialog.title.add.frameworks.support=フレームワークのサポートを追加する
dialog.title.extract.artifact=アーティファクトを抽出する
dialog.title.library.downloading.settings=ライブラリのダウンロード設定
dialog.title.packaging.choose.library=ライブラリを選択
dialog.title.packaging.choose.module=モジュールを選択
display.name.artifacts=アーティファクト
drag.n.drop.text.0.packaging.elements={0}要素
element.kind.name.facet=ファセット
element.kind.name.module=モジュール
empty.module.selection.string=ここでその詳細を表示または編集するモジュールを選択する
enter.module.copy.name.error.message=モジュールコピー名を入力
error.message.0.cannot.be.placed.under.1={0}は{1}の下に置くことはできません
error.message.0.facet.must.be.placed.under.1.facet={0}ファセットは{1}ファセットの下に配置する必要があります
error.message.0.facets.are.not.allowed.in.1={0}ファセットは{1}で使用できません
error.message.cannot.load.facet.configuration.0=ファセット構成をロードできません：{0}
error.message.configuration.cannot.load=ロードすることはできません
error.message.facet.type.isn.t.specified=ファセットタイプが指定されていません
error.message.required.library.is.not.configured={0} cannot be enabled for the project because {1, choice, 1\#its library isn''t|2\#their libraries aren''t} configured.
error.message.unknown.facet.type.0=不明なファセットタイプ： '' {0} ''
error.title.required.library.is.not.configured=ライブラリが構成されていない
external.annotation.prompt=外部注釈プロンプト
external.annotations.external.option=外部から追加する
external.annotations.in.code.option=コードを追加
external.annotations.root.chooser.description=外部注釈は適切なフォルダに保存されます
external.annotations.root.chooser.title={0}の外部アノテーションルートを選択します。
external.annotations.suggestion.message=<html><body>If you do not want annotations in your code you may use external storage.<br> To configure external annotations please specify root directory where files with annotations would be placed</body></html>
facet.banner.text=ファセット '' {0} ''
facet.defaults.display.name=デフォルト
facet.type.banner.text='' {0} ''ファセット
file.chooser.directory.for.downloaded.libraries.description=ダウンロードしたライブラリは選択したディレクトリにコピーされます
file.chooser.directory.for.downloaded.libraries.title=ダウンロードされたライブラリのディレクトリ
find.usages.action.text=用途を探す
framework.detected.info.text={0} {1, choice, 1\#framework is|2\#frameworks are} detected in the project <a href\="configure">Configure</a>
global.library.display.name=Global {0, choice, 1\#Library|2\#Libraries}
jdk.combo.box.invalid.item={0} [無効]
jdk.combo.box.none.item=<None>
jdk.combo.box.project.item=<No Project SDK>
jdk.missing.item=<No SDK>
jdks.node.display.name=SDK
label.text.0.cannot.be.loaded.ignore={0}はロードできません。
label.text.0.cannot.be.loaded.remove={0}はロードできません。
label.text.no.frameworks.detected=フレームワークは検出されませんでした。
label.text.output.directory=出力ディレクトリ：
label.text.please.select.desired.technologies=<html>Please select the desired technologies.<br>This will download all needed libraries and create Facets in project configuration.</html>
label.text.specify.artifact.name=案件名を指定：
label.text.the.following.frameworks.are.detected=<html><body>Several frameworks are detected in the project. Please review the following items and exclude mistakenly detected.</body></html>
libraries.node.text.ide=Libraries contain classes that add up various functionality to your applications. Libraries also include source files and JavaDocs that can help you develop your projects.<br><br>IntelliJ IDEA uses libraries to assist you with code completion, validation, error highlighting, etc.<br><br>Global libraries are referenced through the entire project and can be used from all modules. Also they are available to all projects create locally on your computer.<br><br>Note that Global libraries are not available to anybody you share your project with. If you are sharing project with your team, please use Project libraries instead.<br><br>Expand the node and select child items to manage Global libraries. <br><br> To attach a library to a module, select that module, click the Dependencies tab, click Add and specify the library location.
libraries.node.text.module=Libraries contain classes that add up various functionality to your applications. Libraries also include source files and JavaDocs that can help you develop your projects.<br><br>IntelliJ IDEA uses libraries to assist you with code completion, validation, error highlighting, etc.<br><br>Module libraries are referenced only from the module they are attached to. Expand the node and select child items to manage Module libraries.<br><br> To attach a library to a module, select that module, click the Dependencies tab, click Add and specify the library location.
libraries.node.text.project=Libraries contain classes that add up various functionality to your applications. Libraries also include source files and JavaDocs that can help you develop your projects.<br><br>IntelliJ IDEA uses libraries to assist you with code completion, validation, error highlighting, etc.<br><br>Project libraries are referenced through the entire project and can be used from all modules. Also they are available to everybody you share the project with.<br><br>Expand the node and select child items to manage Project libraries.<br><br> To attach a library to a module, select that module, click the Dependencies tab, click Add and specify the library location.
libraries.remove.confirmation.text=Library ''{0}'' and {1} more {1, choice, 1\#library|2\#libraries} are used in the project.
libraries.remove.confirmation.title=Remove {0, choice, 1\#Library|2\#Libraries}
library.attach.files.action=ファイルまたはディレクトリの添付
library.attach.files.description=ライブラリのクラス、ソース、ドキュメントが配置されているファイルまたはディレクトリを選択する
library.attach.files.to.library.action=ファイルまたはディレクトリをライブラリ '' {0} 'に添付
library.attach.sources.action=ソースを添付
library.attach.sources.action.busy.text=アタッチする...
library.attach.sources.description=ライブラリソースがあるJAR / ZIPファイルまたはディレクトリを選択する
library.choose.one.to.attach=<html><body>Multiple libraries contain the file.<br>Choose libraries to attach sources to</body></html>
library.classes.node=クラス
library.configure.global.title=グローバルライブラリを構成する
library.configure.module.title=モジュールライブラリの設定
library.configure.project.title=プロジェクトライブラリを設定する
library.configure.title=ライブラリの設定
library.docs.node=ドキュメンテーション
library.empty.item=<empty library>
library.empty.library.item=空のライブラリ
library.global.settings=グローバルライブラリ
library.java.attach.files.description=ライブラリクラス、ソース、ドキュメント、またはネイティブライブラリが配置されているファイルまたはディレクトリを選択する
library.javadocs.node=JavaDocs
library.name.already.exists.error=ライブラリ "{0}"は既に存在します
library.name.already.exists.title=ライブラリが既に存在する
library.name.not.specified.error=図書館の名前を入力してください
library.name.not.specified.title=指定されていないライブラリ名
library.remove.action=削除する
library.root.node=ルート
library.source.mismatch=ライブラリソースがクラス{0}のバイトコードと一致しません
library.source.open.class=.classファイルを開く
library.source.show.diff=差分を表示
library.sources.node=ソース
library.unnamed.text={0} and {1, choice, 1\#one more file|2\#{1} more files}
loading.components.for='' {0} ''のコンポーネントの読み込み中...
message.no.module.dependency.candidates=依存するモジュールが見つかりませんでした
message.text.stop.searching.for.frameworks={0}は現在フレームワークを探しています。
module.0.already.exists.error.message=モジュール '' {0} ''は既に存在します
module.add.action=追加
module.add.error.message=プロジェクトにモジュールを追加できません：{0}
module.add.error.title=モジュールの追加
module.already.exists.error=モジュール '' {0} ''はプロジェクトに既に存在します。
module.cannot.load.error=モジュールファイル '' {0} ''を読み込めません：
module.circular.dependency.warning.description=<html><b>There are circular dependencies between\:</b> {0}</html>
module.circular.dependency.warning.short={0}と{
module.classpath.button.edit=編集...
module.classpath.button.move.down=下に移動
module.classpath.button.move.up=上に移動
module.corrupted.data.error=破損したモジュールデータ：{0}
module.corrupted.file.error=モジュールファイル '' {0} 'が無効または壊れています：
module.file.does.not.exist.error=ファイル{0}は存在しません
module.group.banner.text=モジュールグループ '' {0} ''
module.javadoc.add.path.prompt=モジュールのjavadocドキュメントがあるJAR / zipファイルまたはディレクトリを選択する
module.javadoc.add.path.title=JavaDocへのパスを追加する
module.javadoc.add.url.button=JavaDoc URLを追加...
module.javadoc.title=JavaDoc
module.libraries.attach.sources.button=ソースを添付...
module.libraries.choose.sources.button=ソースを選択...
module.libraries.exclude.all.button=すべてを除外する
module.libraries.include.all.button=すべてを含める
module.libraries.javadoc.url.button=ドキュメントのURLを指定...
module.libraries.target.jdk.module.radio=モジュールSDK：
module.libraries.target.jdk.project.radio=<html><b>Project SDK\:</b><br>This SDK is default for all project modules.<br>A module specific SDK can be configured for each of the modules as required.</html>
module.libraries.target.jdk.select.title=プロジェクトSDKを選択
module.library.display.name=Module {0, choice, 1\#Library|2\#Libraries}
module.module.language.level=言語レベル：
module.new.action=新しいモジュール
module.new.action.description=新しいモジュールをプロジェクトに追加する
module.paths.add.content.action=コンテンツルートを追加する
module.paths.add.content.action.description=モジュールにコンテンツルートを追加する
module.paths.add.content.already.exists.error=コンテンツルート "{0}"は既に存在します
module.paths.add.content.dominate.error=コンテンツルートが "{0}"に追加されています
module.paths.add.content.duplicate.error=コンテンツルート "{0}"はモジュール "{1}"に対して既に定義されています。
module.paths.add.content.intersect.error=コンテンツルートが "{0}"に追加されています
module.paths.add.content.prompt=コンテンツルートは、このモジュールに関連するすべてのファイルを含むディレクトリです
module.paths.add.content.title=コンテンツルートディレクトリを選択
module.paths.edit.properties.title=ルートプロパティの編集
module.paths.edit.properties.tooltip=プロパティの編集
module.paths.empty.node=<empty>
module.paths.exclude.output.checkbox=出力パスを除外する
module.paths.excluded.group=除外されたフォルダ
module.paths.include.excluded.tooltip=含める
module.paths.output.label=出力パス：
module.paths.output.title=出力パスを選択
module.paths.remove.content.prompt=コンテンツルート "{0}"を削除しますか？
module.paths.remove.content.title=コンテンツルートを削除する
module.paths.remove.content.tooltip=コンテンツエントリを削除する
module.paths.remove.tooltip=削除する
module.paths.root.node={0}ルート
module.paths.searching.source.roots.progress={0}でソースルートを検索しています
module.paths.searching.source.roots.title=ソースルートを追加する
module.paths.sources.group=ソースフォルダ
module.paths.test.output.label=テスト出力パス：
module.paths.test.output.title=テスト出力パスを選択
module.paths.test.sources.group=テストソースフォルダ
module.paths.title=ソース
module.paths.unmark.source.tooltip=ソースのマークを解除
module.paths.unmark.tests.tooltip=テストのマークを解除する
module.paths.validation.duplicate.content.error=コンテンツルート "{0}"はモジュール "{1}"および "{2}"に対して定義されています。
module.paths.validation.duplicate.source.root.error=モジュール "{0}"
module.paths.validation.duplicate.source.root.in.same.module.error=モジュール "{1}"にソースルート "{0}"が複製されています。
module.paths.validation.source.root.belongs.to.another.module.error=ソースルート "{0}"
module.remove.action=削除する
module.remove.command=モジュールをプロジェクトから切り離す
module.remove.confirmation=Remove {1, choice, 1\#module ''''{0}''''|2\#{1} modules} from the project?
module.remove.confirmation.prompt=Remove {1, choice, 1\#Module|2\#Modules} {0} from the project?
module.remove.confirmation.title=Remove {0, choice, 1\#Module|2\#Modules}
module.remove.from.project.confirmation=モジュール '' {0} ''をプロジェクトから削除しますか？
module.remove.last.confirmation=Are you sure you want to remove {0, choice, 1\#the only module|2\#all modules} from this project?
module.sdk.not.defined=モジュールSDKが定義されていません
module.source.roots.not.configured.error=モジュール{0}に設定されているソースルートがありません
module.source.roots.not.configured.title=ソースルートが設定されていない
module.toggle.excluded.action=除外
module.toggle.excluded.action.description=モジュールからのディレクトリのインクルード/除外
module.toggle.sources.action=ソース
module.toggle.sources.action.description=ディレクトリを{0}としてマークする
module.toggle.test.sources.action=テストソース
module.type.empty.description=ダイアログ構造のプロジェクト構造が開き、プロジェクト構造の構築に役立ちます
module.type.empty.name=空のプロジェクト
module.type.java.description=Java modules are used for developing <b>JVM-based</b> desktop and web applications, including applications that use <b>Java EE</b> and other enterprise development frameworks.
module.type.java.name=Javaモジュール
module.type.unknown.name=不明なモジュールタイプ。 
module.unknown.type.multiple.error=次のモジュールのモジュールタイプを判別できません：
module.unknown.type.single.error=Cannot determine module type ("{1}") for the following module\:"{0}"<br>The module will be treated as a Unknown module.
module.unknown.type.title=未知のモジュールタイプ
module.web.description=Web modules are used for developing Web applications using technologies such as <b>HTML/CSS, JavaScript, PHP</b> and so on. They do not support developing Java applications.
module.web.title=Webモジュール
modules.classpath.title=依存関係
modules.order.export.export.column=輸出する
modules.order.export.scope.column=範囲
modules.order.export.title=注文/輸出
multiple.facets.banner.0.1.facets={0} {1}ファセット
output.tab.title=出力
path.0.is.invalid.error.message=パス '' {0} ''は無効です
progress.text.searching.frameworks=フレームワークの検索
project.compiler.output=<html><b>Project compiler output\:</b><br>This path is used to store all project compilation results. <br>A directory corresponding to each module is created under this path. <br>This directory contains two subdirectories\: Production and Test for production code and test sources, respectively.<br>A module specific compiler output path can be configured for each of the modules as required.</html>
project.configuration.save.file.not.found={0}が見つかりません
project.configure.path.variables.description.title=説明：
project.configure.path.variables.no.description.text=説明はありません
project.configure.path.variables.title=パス変数の設定
project.convert.javadoc.paths.error=JavaDocパスは変換できません。
project.convert.multiple.output.paths.error=プロジェクトは複数の出力パスを使用します。
project.convert.old.prompt=開いているプロジェクト{0}は古い形式です。
project.convert.problems.detected=プロジェクトの変換中に、以下の問題が検出されました：
project.convert.problems.help=詳細は、「ヘルプを表示」を押してください。
project.convert.problems.help.button=ヘルプを表示
project.convert.problems.title=プロジェクト変換の問題
project.convert.source.roots.not.under.project.roots.error=プロジェクトの根底にないソースルートがあります。
project.facets.display.name=ファセット
project.index.building.exclude.roots.progress=除外ルートの構築...
project.index.processing.library.classes.progress=処理モジュール "{0}"のライブラリクラス...
project.index.processing.library.sources.progress=処理モジュール "{0}"のライブラリソース...
project.index.processing.module.content.progress=処理モジュール "{0}"のコンテンツ...
project.index.processing.module.sources.progress=処理モジュール "{0}"のソース...
project.index.scanning.files.progress=ファイルのスキャン中...
project.inherit.compile.output.path=プロジェクトを継承して出力パスをコンパイルする
project.language.level=<html><b>Project language level\:</b><br>This language level is default for all project modules.<br>A module specific language level can be configured for each of the modules as required.</html>
project.language.level.combo.item=プロジェクトのデフォルト
project.language.level.reload.prompt=言語レベルの変更は、プロジェクトのリロードに反映されます。
project.language.level.reload.title=言語レベルが変更されました
project.library.display.name=Project {0, choice, 1\#Library|2\#Libraries}
project.load.default.error=既定のプロジェクトを読み込む際のエラー
project.load.new.version.warning=あなたが開こうとしているプロジェクト{0}は、新しいバージョンの{1}によって作成されました。
project.load.progress=プロジェクトを読み込む
project.load.undefined.path.variables.all.needed=すべてのパス変数を定義する必要があります
project.load.undefined.path.variables.error=プロジェクトファイルに未定義のパス変数があります
project.load.undefined.path.variables.message=プロジェクト構成ファイルには未定義のパス変数があります。
project.load.undefined.path.variables.title=定義されていないパス変数
project.load.waiting.watcher=プロジェクトディレクトリのスキャン中...
project.macros.cancel.button=プロジェクト負荷をキャンセルする
project.macros.name.column=マクロ名
project.macros.path.column=パス
project.macros.prompt=TODO：メッセージ
project.macros.variable.missing.error=パス変数 "{0}"の値が定義されていません
project.macros.variable.missing.title=未定義パス変数
project.module.compile.output.path=モジュールコンパイル出力パスを使用する
project.new.wizard.description.title=説明
project.new.wizard.from.existent.sources.description=<html>Create {0} {1} structure over existing sources</html>
project.new.wizard.from.existent.sources.title=既存のソースから{0}を作成する
project.new.wizard.from.template.description=<html>Create {0} with pre-defined support for your favourite framework/technology</html>
project.new.wizard.from.template.error={0}タイプは選択されていません
project.new.wizard.from.template.title=テンプレートから{0}を作成する
project.new.wizard.import.description=<html>Create {0} {1} from external model ({2})</html>
project.new.wizard.import.title=外部モデルから{0}をインポートする
project.new.wizard.module.content.root.chooser.description=選択されたディレクトリはモジュールコンテンツルートとしてマークされます
project.new.wizard.module.content.root.chooser.title=モジュールコンテンツルートを選択
project.new.wizard.module.file.chooser.title=モジュールファイルの親ディレクトリの選択
project.new.wizard.module.file.description=モジュールの.imlファイルは、選択されたディレクトリ
project.new.wizard.module.file.title=モジュールファイルの場所：
project.new.wizard.module.name.title=モジュール名：
project.new.wizard.module.root.title=コンテンツルート：
project.new.wizard.progress.title=K補まに스터補うま補ねまう補にまに補ねまう
project.new.wizard.select.type.label=タイプを選択
project.order.entry.project=<Project>
project.reload.failed=外部変更をロード中にエラーが発生しました：{0}。
project.reload.failed.title=リロードエラー
project.reload.write.failed=ファイル '' {0} 'に書き込み中にエラーが発生しました。
project.reload.write.failed.title=書き込みエラー
project.remove.confirmation.prompt=Would you like to detach the {1, choice, 1\#project|2\#projects} {0}?
project.root.module.source=<Module source>
project.roots.classpath.format.default.descr=IntelliJ IDEA（.iml）
project.roots.classpath.format.label=依存関係格納形式：
project.roots.display.name=モジュール
project.roots.error.message.invalid.roots=invalid {0} {1, choice, 1\#root|2\#roots}
project.roots.external.annotations.description=<html>Manage external annotations attached to this module.</html>
project.roots.external.annotations.tab.title=外部注釈
project.roots.flatten.modules.action.description=フラットリストにモジュールを表示する
project.roots.flatten.modules.action.text=フラット化モジュール
project.roots.javadoc.tab.description=<html>Manage external JavaDocs attached to this module. External JavaDoc override JavaDoc annotations you might have in your module.</html>
project.roots.jdk.banner.text=SDK '' {0} ''
project.roots.jdks.node.text=JDK stands for the Java Development Kit, a software development package that is required to write, test and debug Java applications. JDK also contains classes and runtime environment that are used to execute the target application. <br><br>Mobile SDK contains emulator of mobile phone as well as embedded Java SDK to compile/pack/run/debug J2ME applications. <br><br>IntelliJ IDEA Plugin SDK contains idea's libraries and idea's embedded JRE to compile/pack/run/debug plugins for Intellij IDEA. <br><br>When you create a J2ME Module or Plugin Module, make sure that you have configured appropriate JDK for such a module.
project.roots.library.banner.text={1} '' {0} ''
project.roots.library.problem.message=依存リスト内の無効なアイテム '' {0} ''
project.roots.module.banner.text=モジュール '' {0} ''
project.roots.module.duplicate.name.message=モジュール名が重複しています
project.roots.module.groups.text=モジュールグループは、プロジェクトモジュールを論理的に整理するために使用されます。
project.roots.module.jdk.problem.message=モジュールSDKが定義されていません
project.roots.native.library.node.text=ネイティブライブラリの場所
project.roots.no.jdk.on.project.message=プロジェクトに作成されたSDKを設定しますか？
project.roots.no.jdk.on.project.title=SDKの作成
project.roots.output.compiler.title=コンパイラの出力
project.roots.path.tab.title=パス
project.roots.plain.mode.action.text.disabled=モジュールグループを非表示にする
project.roots.plain.mode.action.text.enabled=モジュールグループを表示する
project.roots.project.banner.text=プロジェクト '' {0} 'の一般設定
project.roots.project.display.name=プロジェクト
project.roots.project.jdk.inherited=プロジェクトSDK
project.roots.project.jdk.problem.message=プロジェクトSDKが定義されていません
project.roots.replace.library.entry.message=本当に古いライブラリ '' {0} ''を置き換えますか？
project.roots.replace.library.entry.title=既に追加されたライブラリ
project.roots.set.up.jdk.title=Set up {0, choice, 1\#Module|2\#Project} SDK
project.roots.tooltip.library.has.broken.paths=Library ''{0}'' has broken {1, choice, 1\#path|2\#paths}.
project.save.error=プロジェクトを保存できませんでした：
project.sdk.not.defined=プロジェクトSDKが定義されていません
project.sdk.setup=セットアップSDK
project.settings.display.name=プロジェクトの構造
rename.message.prefix.module=モジュール
rename.message.prefix.scope=範囲
rename.module.title=モジュールの名前を変更する
rename.scope.title=スコープの名前を変更します。
sdk.configuration.exception=SDK '' {0} ''は無効です。
sdk.configure.annotations.tab=注釈
sdk.configure.classpath.tab=クラスパス
sdk.configure.editor.title=SDKエディタ
sdk.configure.general.home.path=SDKのホームパス：
sdk.configure.home.file.invalid.error=選択したファイルは{0}の有効なホームではありません
sdk.configure.home.invalid.error=選択したディレクトリは{0}の有効なホームではありません
sdk.configure.home.title={0}のホームディレクトリを選択します。
sdk.configure.javadoc.tab=ドキュメントパス
sdk.configure.javadoc.url.prompt=ドキュメントURLを入力：
sdk.configure.javadoc.url.title=ドキュメントのURLを指定する
sdk.configure.save.settings.error=設定を保存できません
sdk.configure.sourcepath.tab=ソースパス
sdk.configure.title=SDKの設定
sdk.configure.type.home.path={0}ホームパス：
sdk.java.corrupt.error=おそらく、 '' {0} ''にインストールされたSDKが壊れています
sdk.java.corrupt.title=SDKのバージョンを検出できません
sdk.java.name=JDK
sdk.java.name.template=Javaバージョン "{0}"
sdk.java.unknown.name=未知の
sdk.list.name.required.error=SDK名を指定してください
sdk.list.unique.name.required.error=別のSDK名を指定してください
sdk.paths.specify.url.button=URLを指定...
sdk.table.settings=SDKテーブル
sdk.unknown.name=不明なSDK
tab.name.all.facets=すべてのファセット
warning.message.some.required.libraries.wasn.t.downloaded=必要なライブラリがダウンロードされていませんでした。
