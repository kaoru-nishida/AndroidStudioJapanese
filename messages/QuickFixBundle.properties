#AndroidStudio3.1 \u65E5\u672C\u8A9E\u5316\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8
#Tue Nov 21 21:52:21 JST 2017
access.static.via.class.reference.family=クラス参照を介して静的にアクセスする
access.static.via.class.reference.text=静的なアクセス '' {1}。{0} '' '' '{2}' '参照
add.catch.clause.family=catch句に例外を追加する
add.catch.clause.text='catch'句を追加する
add.class.to.extends.list='{0}'を '{1}'に拡張する ''
add.constructor.parameter.name=コンストラクタパラメータを追加する
add.default.constructor.family=デフォルトのコンストラクタを追加する
add.default.constructor.text={0}の引数なしのコンストラクタを{1}に追加します
add.docTag.to.custom.tags=カスタムタグに{0}を追加する
add.exception.from.field.initializer.to.constructor.throws.family.text=クラスコンストラクタの署名に例外を追加する
add.exception.from.field.initializer.to.constructor.throws.text=Add exception to class {0, choice, 0\#default constructor|1\#constructor|2\#constructors} signature
add.exception.to.throws.family=メソッドのシグネチャに例外を追加する
add.exception.to.throws.inherited.method.warning.text=メソッド '' {0} ''が継承されています。
add.exception.to.throws.text=Add {0, choice, 0\#exception|2\#exceptions} to method signature
add.import=インポートを追加
add.interface.to.implements.list='' {0} '' 'を実装する' '{1}' ''
add.library.copy.files.to.radio.button='' {0} ''ライブラリファイルをにコピーしてください
add.library.description.choose.folder=ライブラリをコピーするディレクトリを選択する
add.library.error.cannot.copy='' {0} ''を '' {1} ''にコピーできません
add.library.error.not.found=ライブラリファイル '' {0} ''は存在しません
add.library.title.choose.folder=ディレクトリを選択
add.library.title.dialog='' {0} ''ライブラリをプロジェクトに追加する
add.library.use.bundled.library.radio.button={1}分布からの '' {0} ''を使用
add.method.body.text=メソッド本体を追加する
add.method.family=メソッドの追加
add.method.qualifier.fix.family=メソッド修飾子を追加する
add.method.qualifier.fix.text=メソッドに修飾子{0}を追加する
add.method.text=メソッド '' {0} ''をクラス '' {1} 'に追加
add.missing.annotation.parameters.fix=欠落している注釈パラメータを追加する -  {0}
add.missing.annotation.single.parameter.fix=不足している注釈パラメータ '' {0} ''を追加
add.modifier.fix='' {0} '' {1}を作る
add.new.array.family=欠落している新しい表現を追加する
add.new.array.text=''新しい{0} [] ''を追加する
add.parameter.from.usage.text=Add ''{0}'' as {1, choice, 1\#1st|2\#2nd|3\#3rd|4\#{1,number}th} parameter to method ''{2}''
add.qualifier=修飾子を追加する
add.qualifier.original.class.chooser.title=元のクラス
add.return.statement.text='return'ステートメントを追加する
add.runtime.exception.to.throws.family=メソッドシグネチャにランタイム例外を追加する
add.runtime.exception.to.throws.text=メソッドシグネチャにランタイム例外を追加する
add.type.arguments.single.argument.text=明示的な型引数を追加する
add.type.arguments.text=Add explicit type arguments to {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} argument
add.typecast.family=タイプキャストを追加
add.typecast.text='' {0} 'にキャスト
adjust.package.family=パッケージ名を調整する
adjust.package.text=パッケージ名を '' {0} ''に設定してください
annotations.fix=注釈
anonymous.class.presentation={0}から派生した匿名クラス
bring.variable.to.scope.family=変数をスコープに持ち込む
bring.variable.to.scope.text='{0}' 'をスコープに持ち込む
cannot.change.field.exception=フィールド '' {0} ''タイプを変更できません。
cannot.create.java.file.error.text={1}に{0} .javaを作成できません：{2}
cannot.create.java.file.error.title=ファイルの作成に失敗しました
cannot.create.java.package.error.text={1}に{0}を作成できません：{2}
cannot.create.java.package.error.title=パッケージの作成に失敗しました
cast.parameter.text=Cast {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter to ''{1}''
cast.single.parameter.text=パラメータを '' {0} ''にキャスト
change.class.signature.family=クラス署名を変更する
change.class.signature.text='' {0} ''の署名を '' {1} ''に一致するように変更する
change.extends.list.family=クラスを拡張する
change.inheritors.visibility.warning.text=継承者の可視性をベースメソッドの可視性に変更したいですか？
change.inheritors.visibility.warning.title=継承者を変更する
change.method.signature.from.usage.family=使用法からメソッドの署名を変更する
change.method.signature.from.usage.text='{0}'の署名を '' {1}（{2}）に変更する ''
change.new.operator.type.family=新しいオペレータタイプを変更する
change.new.operator.type.text='' {0} ''を ''新しい{1} {2} ''に変更してください
change.parameter.class.family=パラメータクラスの変更
change.parameter.from.usage.text=Change {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter of method ''{1}'' from ''{2}'' to ''{3}''
change.to.append.family=Fix StringBuilder append
change.to.append.text='' {0} ''に変更
class.initializer.presentation={0}クラス初期化子
class.to.import.chooser.title=インポートするクラス
collection.addall.can.be.replaced.with.constructor.fix.description='' {0}（） ''メソッドはパラメータ化されたコンストラクタで置き換えることができます
collection.addall.can.be.replaced.with.constructor.fix.options.title=確認するクラス
collection.addall.can.be.replaced.with.constructor.fix.title='addAll / putAll'メソッドをパラメータ化されたコンストラクタ呼び出しで置き換える
collection.to.array.family.name=変換を適用する'toArray（） '
collection.to.array.text=変換を適用する '' .toArray（{0}） ''
convert.method.to.constructor=メソッドコンストラクタを作る
convert.to.string.family=文字リテラルの修正
convert.to.string.text=文字列リテラルに変換する
create.abstract.method.from.usage.text=抽象メソッド '' {0} 'を作成する
create.accessor.for.unused.field.family=未使用フィールドのアクセサの作成
create.class=クラス
create.class.from.new.family=新しいクラスからクラスを作成する
create.class.from.new.text=クラス '' {0} ''を作成します
create.class.from.usage.family=使用法からクラスを作成する
create.class.from.usage.text={0} '' {1} 'を作成する
create.class.text=クラス{0}を作成する
create.class.title={0}を作成する
create.constant.from.usage.family=使用法から定数を作成する
create.constant.from.usage.text=定数フィールド '' {0} ''を作成する
create.constructor.from.new.family=新規からコンストラクタを作成する
create.constructor.from.new.text=コンストラクタを作成する
create.constructor.from.super.call.family=super（）からコンストラクタを作成する
create.constructor.from.this.call.family=this（）コールからコンストラクタを作成する
create.constructor.matching.super=superと一致するコンストラクタを作成する
create.constructor.text='' {0} ''のコンストラクタを作成する
create.enum=列挙型
create.enum.constant.from.usage.text=列挙型定数 '' {0} 'を作成する
create.field.from.usage.family=使用法からフィールドを作成する
create.field.from.usage.text=フィールド '' {0} ''を作成
create.field.text=フィールド{0}を作成する
create.getter=ゲッターを作成する
create.getter.and.setter.for.field='' {0} ''のゲッターとセッターを作成する
create.getter.for.field='' {0} ''のゲッターを作成する
create.inner.class.from.usage.text=内部{0} '' {1} 'を作成する
create.interface=インタフェース
create.interface.text=インターフェイス{0}を作成
create.local.from.instanceof.usage.family=instanceofからローカル変数を作成する
create.local.from.instanceof.usage.text=挿入 ''（{0}）{1} ''宣言
create.local.from.usage.family=使用からローカルを作成する
create.local.from.usage.text=ローカル変数 '' {0} ''を作成する
create.method.from.usage.family=使用法からメソッドを作成する
create.method.from.usage.text=メソッド '' {0} ''を作成します
create.package.text=パッケージ{0}を作成する
create.parameter.from.usage.family=使用法からパラメータを作成する
create.parameter.from.usage.text=パラメータ '' {0} ''を作成します
create.property.from.usage.family=使用法からプロパティを作成する
create.property.text=プロパティ{0}を作成する
create.readable.property='' {0} ''のゲッターを作成する
create.readable.property.with.field='' {0} ''のゲッターとフィールドを作成する
create.readable.writable.property.with.field='' {0} ''のゲッター、セッター、フィールドを作成する
create.setter=セッター作成
create.setter.for.field='' {0} ''のセッターを作成する
create.writable.property='' {0} ''のセッターを作成する
create.writable.property.with.field='' {0} ''のセッターとフィールドを作成する
defer.final.assignment.with.temp.family=一時的な割り当てを延期する
defer.final.assignment.with.temp.text=一時変数を使用して '' {0} ''に割り当てを延期する
delete.body.text=メソッド本体を削除
delete.catch.family=キャッチを削除
delete.catch.text='' {0} ''のキャッチを削除
delete.element.fix.text=要素を削除する
delete.reference.fix.text=参照の削除
enable.optimize.imports.on.the.fly='設定|コードスタイル|インポート|有効にインポートを最適化'
exchange.extends.implements.keyword='' {0} {2} ''を '' {1} {2} 'に変更してください
field.to.import.chooser.title=インポートするフィールド
fix.add.special.annotation.family=特別な注釈に追加
fix.add.special.annotation.text=特別なアノテーションリストに '' {0} ''を追加する
fix.argument.family=修正引数
fix.javadoc.family=Javadocの修正
fix.modifiers.family=修正を修正する
fix.parameter.type.family=フィックスパラメータタイプ
fix.parameter.type.text='' {0} '' '' '{1}'型のパラメータをここに設定します
fix.return.type.family=戻り値の型を修正する
fix.return.type.text='' {0} '' 'を返す' '{1}' '
fix.single.character.string.to.char.literal.family=リテラルタイプを修正
fix.single.character.string.to.char.literal.text={0}を{1}に変更（{2}リテラルに）
fix.super.method.return.type.family=修正スーパーメソッド戻り値の型
fix.super.method.return.type.text='' {0} '' 'を返す' '{1}' '
fix.throws.list.add.exception='' {0} ''を '' {1} ''スローリストに追加する
fix.throws.list.family=リストを修正する
fix.throws.list.remove.exception='' {1} ''のスローリストから '' {0} ''を削除する
fix.unused.symbol.injection.family=依存関係注入注釈に追加する
fix.unused.symbol.injection.text='' {1} 'によって注釈が付けられた{0}を非表示にする
fix.variable.type.family=変数タイプの修正
fix.variable.type.text={0} '' {1} ''タイプを '' {2} ''に変更してください
generalize.catch.family=キャッチ全般
generalize.catch.text='' {0} ''から '' {1} ''への一般化キャッチ
generify.family=ファイルの生成
generify.text='' {0} ''を生成しようとする
implement.methods.fix=メソッドの実装
import.class.fix=インポートクラス
initialize.final.field.in.constructor.choose.dialog.title=初期化を追加するコンストラクタを選択する
initialize.final.field.in.constructor.name=コンストラクタで初期化する
insert.new.fix=新規挿入
insert.sam.method.call.fix.family.name=単一の抽象メソッド呼び出しを挿入する
insert.sam.method.call.fix.name=''。{0} ''を挿入して機能的インタフェースのメソッドを呼び出す
insert.super.constructor.call.family=基本Ctrコール
insert.super.constructor.call.text='super（）;'を挿入します。
java.8.collection.removeif.inspection.description=ループはCollection.removeIfに置き換えることができました
java.8.collection.removeif.inspection.fix.name=ループをCollection.removeIfに置き換えます。
java.8.list.sort.inspection.description=Collections.sortはList.sortに置き換えることができました
java.8.list.sort.inspection.fix.name=List.sortで置き換える
java.8.map.api.inspection.description=単一の '' Map。{0} ''メソッド呼び出しで置き換えることができます
java.8.map.api.inspection.fix.family.name=単一マップメソッド呼び出しで置き換える
java.8.map.api.inspection.fix.text='' {0} ''メソッド呼び出しで置き換えます
make.class.an.interface.family=クラスをインタフェースにする
make.class.an.interface.text='' {0} ''インターフェースを作成する
make.final.copy.to.temp='{0}'を{1}の一時変数にコピーしてください
make.final.family=最終決定
make.final.text=最終的に{0}にする
make.final.transform.to.one.element.array={0}を最後の要素配列に変換する
make.interface.an.class.text='' {0} ''クラスを作成する
make.vararg.parameter.last.family=varargパラメータを最後にする
make.vararg.parameter.last.text='' {0} ''をリストの最後に移動する
method.is.inherited.warning.title=メソッドが継承されます。
method.to.import.chooser.title=インポートする方法
module.info.add.requires.family.name=module-info.javaに 'requires'ステートメントを追加する
module.info.add.requires.name=''をmodule-info.javaに追加するには{0} ''文が必要です
move.bound.class.to.front.fix.text=型パラメータ '' {1} ''の境界リストの先頭にバインドされた '' {0} ''を移動します。
move.catch.up.family=キャッチアップを移動
move.catch.up.text='' {1} 'の前に' '{0}' 'のキャッチを移動する
move.class.in.extend.list.family=拡張リストのクラスを移動する
move.class.to.package.family=クラスをパッケージに移動
move.class.to.package.text=パッケージ '' {0} ''に移動
move.class.to.separate.file.family=クラスを別のファイルに移動する
move.class.to.separate.file.text=クラス '' {0} ''を '' {0} .java ''に移動します
move.file.to.source.root.text=ファイルをソースルートに移動する
negation.broader.scope.family=否定的なより広い範囲
negation.broader.scope.text=''（{0}）に変更してください
new.method.body.template.error.text="New Method Body"テンプレートを修正してください
new.method.body.template.error.title=ファイルテンプレートエラー
optimize.imports.fix=インポートの最適化
orderEntry.fix.add.dependency.on.module=モジュール '' {0} ''に依存関係を追加する
orderEntry.fix.add.dependency.on.module.choose=モジュールに依存関係を追加...
orderEntry.fix.add.library.to.classpath=ライブラリ '' {0} ''をクラスパスに追加
orderEntry.fix.choose.module.to.add.dependency.on=モジュールを選択して依存関係を追加する
orderEntry.fix.circular.dependency.warning=モジュール '' {0} 'に依存関係を追加すると、モジュール' '{1}' 'と' '{2}' 'の間の循環依存性が導入されます。
orderEntry.fix.family.add.library.to.classpath=クラスパスにライブラリを追加する
orderEntry.fix.family.add.module.dependency=モジュールの依存関係を追加する
orderEntry.fix.title.circular.dependency.warning=循環依存警告
permute.arguments=パーマネント引数
remove.class.from.extends.list='' {0} '' 'を拡張しない' '{1}' ''
remove.interface.from.implements.list='' {0} '' '' {1} 'を実装していません
remove.modifier.fix="{0}"を{1}にしないでください
remove.parameter.from.usage.text=Remove {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter from method ''{1}''
remove.qualifier.action.text=修飾子を削除
remove.qualifier.fix=修飾子を削除
remove.redundant.arguments.family=冗長な引数を削除する
remove.redundant.arguments.text=冗長な引数を削除して '' {0} ''を呼び出す
remove.suppression.action.family=抑圧を削除
remove.suppression.action.name='' {0} ''抑制を削除
remove.unused.field=フィールド '' {0} ''を削除
remove.unused.parameter.family=未使用のパラメータを削除する
remove.unused.parameter.text=パラメータ '' {0} ''を削除
remove.unused.variable=変数 '' {0} 'を削除
remove.unused.variable.family=未使用変数を削除する
rename.wrong.reference.family=誤った参照の名前を変更する
rename.wrong.reference.text=参照の名前を変更する
replace.with.list.access.text=リストアクセスで置き換える
reuse.variable.declaration.family=変数宣言の再利用
reuse.variable.declaration.text=前の変数 '' {0} ''の宣言を再利用する
safe.delete.family=安全な削除
safe.delete.text=安全な削除 '' {0} ''
searching.for.usages.progress.title=使用法の検索...
setup.jdk.location.family=JDKの場所の設定
setup.jdk.location.text=JDKのセットアップ
side.effect.action.cancel=キャンセル
side.effect.action.remove=削除する
side.effect.action.transform=変換
side.effect.message1=<html><body>There are possible side effects found in expressions assigned to the variable ''{0}''<br>You can\:<ul><li><b>Remove</b> variable usages along with all expressions involved</li></body></html>
side.effects.warning.dialog.title=副作用が見つかりました
simplify.boolean.expression.family=ブール式の簡略化
simplify.boolean.expression.text={0}を{1}に単純化する
static.import.method.choose.method.to.import=インポートする方法を選択する
static.import.method.text=静的メソッドのインポート
super.class.constructors.chooser.title=スーパークラスコンストラクタを選択する
surround.with.try.catch.fix=try / catchでサラウンド
target.class.chooser.title=ターゲットクラスを選択
uidesigner.change.bound.field.type=バウンドフィールドタイプの変更
uidesigner.change.gui.component.type=GUIコンポーネントタイプを変更する
wrap.array.to.arrays.as.list.parameter.text=Wrap {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter using ''Arrays.asList()''
wrap.array.to.arrays.as.list.single.parameter.text='Arrays.asList（）'を使用して折り返す
wrap.expression.using.static.accessor.family=式をラップする
wrap.expression.using.static.accessor.text='' {0}（） ''を使用して折り返す
wrap.long.with.math.to.int.parameter.multiple.text=Wrap {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter using ''Math.toIntExact()''
wrap.long.with.math.to.int.parameter.single.text='Math.toIntExact（）'を使用してパラメータを折り返します。
wrap.long.with.math.to.int.text='Math.toIntExact（）'を使用して折り返す
wrap.with.java.io.file.parameter.multiple.text=Wrap {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter using ''new File()''
wrap.with.java.io.file.parameter.single.text='new File（）'を使用してパラメータを折り返します。
wrap.with.java.io.file.text='new File（）'を使用して折り返す
wrap.with.optional.parameter.text=Wrap {0, choice, 1\#1st|2\#2nd|3\#3rd|4\#{0,number}th} parameter using ''java.util.Optional''
wrap.with.optional.single.parameter.text='java.util.Optional'を使用して折り返す
