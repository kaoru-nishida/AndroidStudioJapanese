#AndroidStudio3.1 \u65E5\u672C\u8A9E\u5316\u30D7\u30ED\u30B8\u30A7\u30AF\u30C8
#Tue Nov 21 21:52:20 JST 2017
<spot>Flashing=rectangle</spot> shows the place where intention is applicable.
cast.expression=キャスト式
cast.to.0='' {0} 'にキャスト
choose.type.popup.title=タイプを選択
class.completion.file.path=一致するすべてのプロジェクトファイルを検索するには、もう一度{0}を押します
class.completion.file.path.all.variants={0}を押して、任意のタイプの一致するファイルを検索します
code.coverage=コードカバレッジ
code.coverage.is.not.supported=コードカバレッジはjre 5.0以上でサポートされています
command.name.surround.with.runtime.cast=ランタイムキャストによるサラウンド
command.name.typing=タイピング
configure.code.style.on.fragment.dialog.cancel=スキップ
configure.code.style.on.fragment.dialog.progress.text=選択したコードフラグメントに影響を与えるフィルタリング設定...
configure.code.style.on.fragment.dialog.progress.text.under=[スキップ]を押すとすべての設定が表示されます
configure.code.style.on.fragment.dialog.title=コードスタイルの設定を調整する
copy.abstract.method.intention.name='' {0} ''の既存の実装を使用する
copy.abstract.method.no.existing.implementations.found=既存の実装が見つかりません
copy.abstract.method.popup.title=コピーする実装を選択する
copy.abstract.method.title=抽象メソッドの実装を使用する
coverage.button.add.package=パッケージを追加
coverage.data.not.found=カバレッジデータが見つかりません
coverage.data.outdated=過去のカバレッジデータ
coverage.pattern.filter.editor.choose.package.title=パッケージを選択
create.directory.command=ディレクトリの作成
create.directory.text=ディレクトリ{0}を作成する
create.file.family=ファイルの作成
create.file.text=ファイル{0}を作成する
create.tagfile.text=タグファイル{0}を作成する
deannotate.intention.action.text=Deannotate
deannotate.intention.chooser.title=削除する注釈を選択
declaration.navigation.title=宣言を選択
dialog.add.live.template.title=ライブテンプレートを追加する
dialog.copy.live.template.title=ライブテンプレートをコピーする
dialog.create.class.destination.package.label=宛先パッケージ：
dialog.create.class.label={0}を作成する：
dialog.create.class.name={0} {1}を作成する
dialog.create.class.package.chooser.title=デスティネーションパッケージを選択
dialog.create.field.from.parameter.already.exists.text=既存のフィールド '' {0} ''を使用しますか？
dialog.create.field.from.parameter.already.exists.title=フィールドは既に存在する
dialog.create.field.from.parameter.declare.final.checkbox=最終宣言
dialog.create.field.from.parameter.field.name.label=名：
dialog.create.field.from.parameter.field.type.label=タイプのフィールド：
dialog.create.field.from.parameter.title=フィールドの作成
dialog.edit.live.template.title=ライブテンプレートを編集する
dialog.edit.template.button.edit.variables=変数の編集
dialog.edit.template.checkbox.html=HTML
dialog.edit.template.checkbox.html.text=HTMLテキスト
dialog.edit.template.checkbox.jsp=JSP
dialog.edit.template.checkbox.reformat.according.to.style=スタイルに応じた再フォーマット
dialog.edit.template.checkbox.shorten.fq.names=FQ名を短縮する
dialog.edit.template.checkbox.smart.type.completion=スマートタイプの完成
dialog.edit.template.checkbox.use.static.import=可能であれば静的インポートを使用する
dialog.edit.template.checkbox.xml=XML
dialog.edit.template.checkbox.xsl.text=XSLテキスト
dialog.edit.template.context.title=コンテキスト
dialog.edit.template.error.already.exists=テンプレートを保存できません。
dialog.edit.template.error.malformed.abbreviation=テンプレートを保存できません。
dialog.edit.template.error.title=保存できません
dialog.edit.template.label.abbreviation=略語：
dialog.edit.template.label.description=説明：
dialog.edit.template.label.expand.with=展開する
dialog.edit.template.label.group=グループ：
dialog.edit.template.options.title=オプション
dialog.edit.template.shortcut.default=デフォルト（{0}）
dialog.edit.template.template.text.title=テンプレートテキスト：
dialog.import.on.paste.title=インポートするクラスを選択
dialog.import.on.paste.title2=インポートする要素を選択
dialog.intention.settings.description.panel.title=説明
dialog.intention.settings.description.usage.example.title=使用例
dialog.intention.settings.intention.list.title=意向表
dialog.paste.on.import.text=<html>The code fragment which you have pasted uses classes that are not accessible by imports in the new context.<br/>Select classes that you want to import to the new file.</html>
dialog.paste.on.import.text2=<html>The code fragment which you have pasted uses elements that are not accessible by imports in the new context.<br/>Select elements that you want to import to the new file.</html>
dialog.reformat.files.optimize.imports.checkbox=インポートの最適化
dialog.reformat.files.reformat.selected.files.label=選択したファイルを再フォーマットしますか？
dialog.reformat.files.title=再フォーマットファイル
disable.intention.action='' {0} ''を無効にする
display.coverage.prompt='' {0} ''のカバレッジデータを表示しますか？
enable.intention.action='' {0} ''を有効にする
error.attempt.to.generate.constructor.for.anonymous.class=匿名クラスにコンストラクタを追加できません
error.cannot.convert.default.message=無効な値： '' {0} ''
error.cannot.resolve.0.1={0} '' {1} 'を解決できません
error.cannot.resolve.class=クラス '' {0} 'を解決できません
error.cannot.resolve.default.message=シンボル '' {0} 'を解決できません
error.dialog.readonly.file.title=ファイルは読み取り専用です
error.dialog.readonly.files.message={0}には読み取り専用ファイルが含まれています。
error.dialog.readonly.files.title=読み取り専用ファイルを変更できない
error.hint.file.is.readonly=ファイル{0}は読み取り専用です
error.unknown.enum.value.message=不明なenum値 '' {0} ''
finish.template.command=完了テンプレート
generate.constructor.fields.chooser.title=コンストラクタで初期化するフィールドを選択する
generate.constructor.super.constructor.chooser.title=スーパークラスコンストラクタを選択する
generate.delegate.method.chooser.title=[代理人を生成するメソッドを選択]
generate.delegate.target.chooser.title=対象を選択して代理人を生成する
generate.equals.and.hashcode.already.defined.title=equals（）およびhashCode（）を生成します。
generate.equals.and.hashcode.already.defined.warning=メソッド '' boolean equals（Object） ''と '' int hashCode（） ''はすでに定義されています
generate.equals.and.hashcode.already.defined.warning.anonymous=メソッド 'boolean equals（Object）'と 'int hashCode（）'が既に定義されています
generate.equals.and.hashcode.error.no.object.class.message=equals（）とhashCode（）は生成できません。
generate.equals.and.hashcode.error.no.object.class.title=No java.lang.Object
generate.equals.compare.arrays.comment=//おそらく間違っている -  Object []配列とArrays.equalsを比較する
generate.equals.compare.nested.arrays.comment=//ネストされた配列を比較する - ここで{0}の値
generate.equals.hashcode.accept.sublcasses=equals（）メソッドのパラメータとしてサブクラスを受け入れる
generate.equals.hashcode.accept.sublcasses.explanation=<html><body>While generally incompliant to Object.equals() specification accepting<br>subclasses might be necessary for generated method to work correctly<br>with frameworks, which generate Proxy subclasses like Hibernate.</body></html>
generate.equals.hashcode.equals.fields.chooser.title=equals（）に含めるフィールドを選択する
generate.equals.hashcode.hashcode.fields.chooser.title=hashCode（）に含めるフィールドを選択する
generate.equals.hashcode.internal.error=内部エラー
generate.equals.hashcode.non.null.fields.chooser.title=ヌル以外のフィールドをすべて選択する
generate.equals.hashcode.template=テンプレート：
generate.equals.hashcode.use.getters=コード生成時にゲッターを使う
generate.equals.hashcode.warning.hashcode.for.arrays.is.not.supported=配列のhashCode（）はサポートされていません
generate.equals.hashcode.wizard.title=equals（）およびhashCode（）を生成します。
generate.equals.warning.equals.for.nested.arrays.not.supported=ネストされた配列のequals（）はサポートされていません
generate.equals.warning.generated.equals.could.be.incorrect=オブジェクト[]の生成されたequals（）が正しくない可能性があります
generate.getter.fields.chooser.title=ゲッターを生成するフィールドの選択
generate.getter.setter.title=ゲッターとセッターを生成するフィールドの選択
generate.getter.template=ゲッターテンプレート：
generate.list.popup.title=生成する
generate.setter.fields.chooser.title=セッターを生成するフィールドの選択
generate.setter.template=セッターテンプレート：
goto.implementation.chooserTitle=<html><body>Choose Implementation of <b>{0}</b> ({1} found{2})</body></html>
goto.implementation.findUsages.title={0}の実装
goto.implementation.notFound=実装が見つかりません
goto.super.class.chooser.title=スーパークラスまたはインタフェースを選択する
goto.super.method.chooser.title=スーパーメソッドを選択する
goto.super.method.findUsages.title={0}のスーパーメソッド
goto.super.method.of.chooser.title={0}のスーパーメソッドを選択します。
goto.super.property.chooser.title=スーパープロパティを選択
goto.test.chooserTitle.subject=<html><body>Choose Test Subject for <b>{0}</b> ({1} found{2})</body></html>
goto.test.chooserTitle.test=<html><body>Choose Test for <b>{0}</b> ({1} found{2})</body></html>
goto.test.findUsages.subject.title={0}の被験者をテストする
goto.test.findUsages.test.title={0}のテスト
goto.test.notFound=テスト対象が見つかりませんでした
highlight.exceptions.thrown.chooser.title=ハイライトする例外クラスを選択
highlight.exceptions.thrown.notfound=見つかったメソッドにスローされた例外はありません
highlight.imported.classes.chooser.title=インポートしたクラスを選択して強調表示する
highlight.imported.members.chooser.title=インポートされたメンバーを選択して強調表示する
highlight.overridden.classes.chooser.title=からオーバーライドされたメソッドをハイライトするクラスを選択
highlight.thrown.exceptions.chooser.all.entry=すべてのリスト
i18n.quickfix.code.panel.resource.bundle.expression.label=リソースバンドル式：
i18n.quickfix.code.panel.title=Javaコード情報
i18n.quickfix.preview.panel.title=プレビュー
i18n.quickfix.property.panel.properties.file.label=プロパティファイル：
i18n.quickfix.property.panel.property.key.label=Grand Kash용품K
i18n.quickfix.property.panel.property.value.label=プロパティ値：
i18n.quickfix.property.panel.title=プロパティ情報
i18n.quickfix.property.panel.update.all.files.in.bundle.checkbox=リソースバンドルのすべてのプロパティファイルを更新する
i18nize.cant.create.properties.file.because.its.name.is.associated=その名前が{1}に関連付けられているため、プロパティファイル '' {0} ''を作成できません。
i18nize.dialog.error.jdk.message=クラス 'java.util.ResourceBundle'が見つかりません。
i18nize.dialog.error.jdk.title=クラスが見つかりません
i18nize.dialog.error.property.already.defined.message=プロパティ '' {0} ''はファイル '' {1} ''に既に存在します。
i18nize.dialog.error.property.already.defined.title=既に存在するプロパティ
i18nize.dialog.property.file.chooser.title=プロパティファイルを選択
i18nize.dialog.template.link.label=I18nテンプレートを編集する
i18nize.dialog.title=ハードコーディングされた文字列をI18nizeする
i18nize.empty.file.path=プロパティファイルのパスを指定してください
i18nize.error.creating.properties.file=プロパティーファイルの作成中にエラー
i18nize.error.message=Java文字列リテラルまたはその部分文字列のみをi18nizeできます。
i18nize.error.title=選択範囲を指定できません
i18nize.jsp.error=I18nizeするJSPテキストを選択してください。
implementation.view.title={0}の定義
incremental.search.tooltip.prefix=検索する：
inlay.hints.blacklist.method=現在のメソッドのヒントを表示しない
inlay.hints.blacklist.method.description=現在のメソッドをパラメータ名のヒントのブラックリストに追加します。
inlay.hints.blacklist.pattern.explanation=<html> No in-line parameter name hints will be shown for methods matching any of these patterns.<br> Patterns are matched on fully qualified method name, parameter count and parameter names. <ul> <li><code>java.lang</code> matches all methods from <em>java.lang</em> package</li> <li><code>java.lang.*(*, *)</code> matches all methods from the <em>java.lang</em> package with two parameters</li> <li><code>(*info)</code> matches all single parameter methods where the parameter name ends with <em>info</em></li> <li><code>(key, value)</code> matches all methods with parameters <em>key</em> and <em>value</em></li> <li><code>*.put(key, value)</code> matches all <em>put</em> methods with <em>key</em> and <em>value</em> parameters </ul> </html>
inlay.hints.disable.action.text=ヒントを無効にする
inlay.hints.disable.custom.option='' {0} ''を無効にする
inlay.hints.enable.action.text=パラメータ名のヒントを有効にする
inlay.hints.enable.custom.option='' {0} ''を有効にする
inlay.hints.intention.family.name=パラメータ名ヒント
inlay.hints.show.settings=メソッド '' {0} ''をブラックリストに追加...
inlay.hints.show.settings.description=パラメータ名のヒント設定を開く
insert.code.template.command=コードテンプレートを挿入する
inspection.error.dialog.title=エラー
inspection.i18n.display.name=ハードコーディングされた文字列
inspection.i18n.expression.is.invalid.error.message=I18nized Expressionテンプレートは有効な式ではありません
inspection.i18n.message.general.with.value=ハードコーディングされた文字列リテラル：{0}
inspection.i18n.option.ignore.assert=assert文の引数を無視する
inspection.i18n.option.ignore.assigned.to.constants=定数に割り当てられたリテラルを無視する
inspection.i18n.option.ignore.comment.pattern=このコメントを含む行を無視します（java.util.Pattern形式のパターン）。
inspection.i18n.option.ignore.comment.title=Nls以外のコメントパターン
inspection.i18n.option.ignore.for.exception.constructor.arguments=例外コンストラクタ引数を無視する：
inspection.i18n.option.ignore.for.junit.assert.arguments=JUnitの引数を無視する
inspection.i18n.option.ignore.for.specified.exception.constructor.arguments=指定された例外コンストラクタの引数を無視する
inspection.i18n.option.ignore.nonalphanumerics=アルファベット文字を含まないリテラルを無視する
inspection.i18n.option.ignore.property.keys=既存のプロパティキーと等しい値を持つリテラルを無視する
inspection.i18n.option.ignore.qualified.class.names=既存の修飾されたクラス名と等しい値を持つリテラルを無視する
inspection.i18n.option.ignore.tostring=toString（）メソッドの内容を無視する
inspection.i18n.quickfix=ハードコーディングされた文字列リテラルをI18nize
inspection.i18n.quickfix.annotate.as=@ {0}として注釈を付ける
inspection.i18n.quickfix.annotate.element.as={0} '' {1} 'を@ {2}として注釈を付ける
inspection.invalid.resource.bundle.reference=無効なリソースバンドルの参照 '' {0} ''
inspection.unresolved.property.key.reference.message=文字列リテラル '' {0} ''は有効なプロパティキーではありません
inspection.unresolved.property.key.reference.name=無効なプロパティキー
intention.add.annotation.family=注釈を追加する
intention.add.on.demand.static.import.family=オンデマンドスタティックインポートを追加する
intention.add.on.demand.static.import.text='' {0} ''のオンデマンド静的インポートを追加
intention.add.single.member.import.text='' {0} ''のインポートを追加
intention.add.single.member.static.import.family=単一メンバー静的インポートを追加する
intention.add.single.member.static.import.text='' {0} ''の静的インポートを追加する
intention.assign.field.from.parameter.family=フィールドにパラメータを割り当てる
intention.assign.field.from.parameter.text=フィールドを '' {0} ''に割り当てる
intention.bind.fields.from.parameters.family=フィールドにパラメータをバインドする
intention.bind.fields.from.parameters.text={0}パラメータをフィールドにバインドする
intention.break.string.on.line.breaks.text=' n'に文字列を区切ります
intention.color.chooser.dialog=カラーを選択
intention.compose.function.family=ネストされた関数呼び出しを合成で置き換える
intention.compose.function.text=ネストされた関数呼び出しをandに置き換える
intention.convert.color.representation.family=色表現を変換する
intention.convert.color.representation.text=''新しい色{0} ''に変換する
intention.convert.to.basic.latin=基本ラテン語に変換する
intention.create.field.from.parameter.family=パラメータの項目を登録する
intention.create.field.from.parameter.text=パラメータ '' {0} ''のフィールドを作成します
intention.create.test=テストの作成
intention.create.test.dialog.choose.super.class=スーパークラスを選択
intention.create.test.dialog.class.name=クラス名：
intention.create.test.dialog.fix.library=修正
intention.create.test.dialog.generate=生成する：
intention.create.test.dialog.java=Java
intention.create.test.dialog.language=言語：
intention.create.test.dialog.library.not.found={0}モジュールがライブラリに見つかりません
intention.create.test.dialog.select.methods=次のテストメソッドを生成します。
intention.create.test.dialog.setUp=setUp / @ Before
intention.create.test.dialog.show.inherited=継承されたメソッドを表示する
intention.create.test.dialog.super.class=スーパークラス：
intention.create.test.dialog.tearDown=tearDown / @ After
intention.create.test.dialog.testing.library=テストライブラリ：
intention.edit.interceptor.binding.family=インターセプタバインディング
intention.edit.interceptor.binding.text=インターセプタ '' {0} ''バインディングを編集する
intention.encapsulate.field.text=カプセル化フィールド
intention.error.cannot.create.class.message=クラス '' {0} 'を作成できません
intention.error.cannot.create.class.title=クラスの作成に失敗しました
intention.extract.if.condition.family=条件を抽出する
intention.extract.if.condition.text=if（{0}）を抽出する
intention.implement.abstract.class.default.text=抽象クラスを実装する
intention.implement.abstract.class.family=抽象クラスまたはインタフェースを実装する
intention.implement.abstract.class.interface.text=インタフェースを実装する
intention.implement.abstract.class.subclass.text=サブクラスを作成する
intention.implement.abstract.method.class.chooser.title=実装クラスの選択
intention.implement.abstract.method.command.name=メソッドの実装
intention.implement.abstract.method.error.no.classes.message=このメソッドを実装できるクラスはありません
intention.implement.abstract.method.error.no.classes.title=クラスが見つかりません
intention.implement.abstract.method.family=抽象メソッドを実装する
intention.implement.abstract.method.searching.for.descendants.progress=子孫の検索...
intention.implement.abstract.method.text=メソッド '' {0} ''を実装しています
intention.inline.map.family=インラインストリームマッピング方法
intention.inline.map.inline.text={0} ''本文を次の '' {1} ''呼び出しに挿入します
intention.inline.map.merge.text=マージ '' {0} ''コールと '' {1} ''コール
intention.insert.literal.underscores=リテラルにアンダースコアを挿入する
intention.intercept.ejb.method.or.class.class.text=EJBクラス '' {0} ''のインターセプタを追加
intention.intercept.ejb.method.or.class.family=EJBインターセプタを追加する
intention.intercept.ejb.method.or.class.method.text=ビジネスメソッド '' {0} ''のインターセプタを追加
intention.introduce.variable.text=ローカル変数を導入する
intention.invert.if.condition=条件を反転する場合
intention.join.declaration.family=宣言と割り当てに参加する
intention.join.declaration.text=結合宣言と割り当て
intention.merge.filter.family=フィルターをマージする
intention.merge.filter.text=フィルターの連鎖をマージする
intention.move.field.assignment.to.declaration=割り当てをフィールド宣言に移動する
intention.move.initializer.to.constructor=初期化子をコンストラクタに移動する
intention.move.initializer.to.set.up=初期化子をsetUpメソッドに移動する
intention.override.method.text=オーバーライドメソッド '' {0} ''
intention.remove.literal.underscores=リテラルからアンダースコアを削除する
intention.replace.cast.with.var.family=キャストを変数に置き換える
intention.replace.cast.with.var.text='' {0} ''を '' {1} ''に置き換えてください
intention.replace.concatenation.with.formatted.output.family=フォーマットされた出力との連結の置換
intention.replace.concatenation.with.formatted.output.text='+'を 'java.text.MessageFormat.format（）'に置き換えます
intention.settings=意図
intention.settings.category.text=<center>You have selected the intention category ''<b>{0}</b>''.</center>By clicking the checkbox, you can enable/disable all intentions in this category.To enable/disable a particular intention, select the intention inside this category.
intention.split.declaration.assignment.text=宣言と割り当てに分割
intention.split.declaration.family=分割宣言
intention.split.declaration.text=別々の宣言に分割する
intention.split.filter.family=スプリットフィルター
intention.split.filter.text=フィルタのチェーンに分割
intention.split.if.family=分割した場合
intention.split.if.text=もしあれば2に分割する
intention.surround.resource.with.ARM.block=try-with-resourcesブロックによるサラウンド
intention.surround.with.ARM.block.template=リソースを試してみる
intention.underscores.in.literals.family=数値リテラルの下線
intention.unwrap.else.branch='else'ブランチを解除する
intention.unwrap.else.branch.changes.semantics='else'ブランチの解除（セマンティクスの変更）
intentions.category.ejb=EJB
javadoc.action.back=バック
javadoc.action.forward=フォワード
javadoc.action.view.external=外部ドキュメントを見る
javadoc.candidates=<html>Candidates for method call <b>{0}</b> are\:<br><br>{1}</html>
javadoc.candidates.not.found=<html>No candidates found for method call <b>{0}</b>.</html>
javadoc.constructor.candidates=<html>Candidates for new <b>{0}</b>() are\:<br>{1}</html>
javadoc.deprecated=廃止予定
javadoc.description.copied.from.class=クラスの記述：
javadoc.description.copied.from.interface=インタフェース：
javadoc.documentation.not.found.message=この要素のドキュメントが見つかりません。
javadoc.documentation.not.found.title=ドキュメントなし
javadoc.error.resolving.url=Couldn''t resolve URL <i>{0}</i> <p>Configuring paths to API docs in <a href\="open\://Project Settings">project settings</a> might help
javadoc.external.fetch.error.message=リモートドキュメントを取得できません：内部エラー
javadoc.fetching.progress=ドキュメントの取得中...
javadoc.info.title={0}のドキュメント
javadoc.method.in.class=クラス{1}の{0}
javadoc.method.in.interface=インタフェース{1}の{0}
javadoc.method.overrides=オーバーライド：
javadoc.method.specified.by=指定：
javadoc.parameters=パラメーター：
javadoc.resolved.value=解決された値：
javadoc.returns=戻り値：
javadoc.see.also=関連項目：
javadoc.since=以来：
javadoc.throws=例外：
javadoc.type.parameters=タイプパラメータ：
lightbulb.tooltip=をクリックするか、{0}を押します。
livetemplate.description.geti=シングルトンメソッドを挿入するgetInstance
livetemplate.description.if.not.null=挿入されていない場合は 'null'ステートメント
livetemplate.description.if.null=挿入 '' nullの場合 ''ステートメント
livetemplate.description.inst=instanceofでオブジェクトタイプをチェックし、それをダウンキャストします。
livetemplate.description.itar=配列の要素を反復する
livetemplate.description.itco=java.util.Collectionの要素を反復する
livetemplate.description.iten=java.util.Enumerationを反復する
livetemplate.description.iter=Iterableを繰り返す| 
livetemplate.description.itit=java.util.Iteratorを反復する
livetemplate.description.itli=java.util.Listの要素を反復する
livetemplate.description.itover=J2SDK 5.0の構文でIterableまたはArrayの選択範囲を反復処理する
livetemplate.description.ittok=Stringからトークンを反復する
livetemplate.description.itve=java.util.Vectorの要素を反復する
livetemplate.description.lazy=遅い初期化を実行する
livetemplate.description.lst=配列の最後の要素を取得します。
livetemplate.description.mn=より小さい値を変数に設定する
livetemplate.description.mx=変数に大きな値を設定する
livetemplate.description.prsf=プライベート静的final
livetemplate.description.psf=public static final
livetemplate.description.psfi=public static final int
livetemplate.description.psfs=public static final String
livetemplate.description.psvm=main（）メソッドの宣言
livetemplate.description.ritar=配列の要素を逆順に反復する
livetemplate.description.serr=文字列をSystem.errに出力します。
livetemplate.description.souf=フォーマットされた文字列をSystem.outに出力します。
livetemplate.description.sout=文字列をSystem.outに出力する
livetemplate.description.soutm=現在のクラスとメソッド名をSystem.outに出力します。
livetemplate.description.soutp=メソッドのパラメータ名と値をSystem.outに出力します。
livetemplate.description.soutv=値をSystem.outに出力します。
livetemplate.description.st=文字列
livetemplate.description.surround.braces={}で囲む
livetemplate.description.surround.cdata.in.xmlorhtmlorjsp=CDATAセクションでのサラウンド
livetemplate.description.surround.parens=サラウンド（）
livetemplate.description.surround.tag=Surround with <tag></tag>
livetemplate.description.surround.tag.in.htmlorjsp=Surround with <tag></tag> in HTML/JSP
livetemplate.description.surround.with.callable=コール可能なサラウンド
livetemplate.description.surround.with.read.lock=ReadWriteLock.readLockでのサラウンド
livetemplate.description.surround.with.write.lock=ReadWriteLock.writeLockでのサラウンド
livetemplate.description.tag.pair=タグペア
livetemplate.description.thr=新しいものを投げる
livetemplate.description.toar=配列にjava.util.Collectionの要素を格納する
macro.array.variable=arrayVariable（）
macro.capitalize.string=capitalize（String）
macro.capitalizeAndUnderscore.string=capitalizeAndUnderscore（String）
macro.cast.to.left.side.type=castToLeftSideType（）
macro.classname=クラス名（）
macro.component.type.of.array=コンポーネントTypeOf（配列）
macro.current.package=現在のパッケージ（）
macro.decapitalize.string=decapitalize（String）
macro.descendant.classes.enum=descendantClassesEnum（String）
macro.enum=列挙型（...）
macro.expected.type=expectedType（）
macro.expression.type=expressionType（式）
macro.file.name=ファイル名（）
macro.file.name.without.extension=fileNameWithoutExtension（）
macro.firstWord.string=firstWord（String）
macro.groovy.script=groovyスクリプト（ "groovy code"）
macro.guess.element.type.of.container=guessElementType（コンテナ）
macro.iterable.component.type=iterableComponentType（ArrayOrIterable）
macro.iterable.variable=iterableVariable（）
macro.linenumber=lineNumber（）
macro.method.parameters=methodParameters（）
macro.methodname=methodName（）
macro.qualified.class.name=qualifiedClassName（）
macro.right.side.type=rightSideType（）
macro.suggest.first.variable.name=suggestFirstVariableName（）
macro.suggest.index.name=suggestIndexName（）
macro.suggest.variable.name=suggestVariableName（）
macro.undescoresToCamelCase.string=アンダースコアToCamelCase（String）
macro.undescoresToSpaces.string=underscoresToSpaces（String）
macro.variable.of.type=variableOfType（型）
methods.to.implement.chooser.title=実装するメソッドを選択
methods.to.override.chooser.title=オーバーライドするメソッドを選択
methods.to.override.implement.chooser.title=上書き/実装するメソッドの選択
multiple.implementations.tooltip=複数の実装
n.of.m={1}の{0}
no.coverage=カバレッジなし
no.documentation.found=ドキュメントは見つかりませんでした。
no.methods.overriding.0.are.found=No methods overriding {0, choice, 0\#|1\# '{1}'|2\#these classes} are found
node.abstract.flag.tooltip=抽象
node.annotation.tooltip=注釈
node.anonymous.class.tooltip=匿名クラス
node.class.tooltip=クラス
node.enum.tooltip=列挙型
node.exception.tooltip=例外
node.excluded.flag.tooltip=除外
node.field.tooltip=フィールド
node.final.flag.tooltip=最後の
node.interface.tooltip=インタフェース
node.junit.test.tooltip=JUnitテスト
node.method.tooltip=方法
node.runnable.class.tooltip=実行可能クラス
node.static.flag.tooltip=静的
override.implement.broken.file.template.message="Override / Implemented Method Body"テンプレートを修正してください
override.implement.broken.file.template.title=ファイルテンプレートエラー
parameter.info.no.parameters=<no parameters>
paste.data.flavor.folding=FoldingData
paste.dataflavor.referencedata=参照データ
powered.by=搭載
powered.by.plugin='' {0} ''プラグイン。
process.optimize.imports=輸入量の最適化
process.optimize.imports.before.commit=コミットする前にインポートを最適化する
process.rearrange.code=コードの再編成...
process.rearrange.code.before.commit=コミットする前にコードを整理する
process.reformat.code=再フォーマットコード
process.reformat.code.before.commit=コミットする前の再フォーマットコード
process.scope.changed.files=VCSのみファイルを変更しました
process.scope.directory=ディレクトリ '' {0} ''
process.scope.file=ファイル{0}
process.scope.module=モジュール '' {0} ''
process.scope.project=プロジェクト '' {0} ''
progress.reformat.and.optimize.common.command.text=インポートの再フォーマットと最適化
progress.reformat.stage.applying.changes=変更の保存中...
progress.reformat.stage.expanding.children.indents=必要な子インデントを拡張する
progress.reformat.stage.processing.blocks=変更の計算中...
progress.reformat.stage.wrapping.blocks=準備...
progress.text.optimizing.imports=インポートの最適化...
prompt.remove.coverage='' {0} ''カバレッジデータを削除しますか？
property.has.more.parameters.than.passed=Property ''{0}'' expected {1} {1, choice, 1\#parameter|2\#parameters}, passed {2}
quick.definition.back=バック
quick.definition.edit.source=ソースを編集
quick.definition.forward=フォワード
quick.definition.show.source=ソースを表示
quickfix.add.variable.family.name=変数を初期化する
quickfix.add.variable.text=変数 '' {0} 'を初期化する
quickfix.i18n.command.name=I18nize
quickfix.i18n.concatentation=ハードコーディングされた文字列リテラルを含む文字列連結をI18nize
quickfix.i18n.concatentation.error=文字列連結が見つかりません
reformat.and.optimize.progress.common.text=輸入品の準備...
reformat.code.accept.button.text=走る
reformat.directory.dialog.filters=フィルタ
reformat.directory.dialog.options=オプション
reformat.option.all.files.in.directory=ディレクトリ{0}のすべてのファイル
reformat.option.include.subdirectories=サブディレクトリを含める
reformat.option.optimize.imports=インポートの最適化
reformat.option.rearrange.entries=エントリの並べ替え
reformat.option.selected.text=選択したテキスト
reformat.option.vcs.changed.region=VCSのみがテキストを変更しました
reformat.progress.common.text=コードの再フォーマット中...
reformat.progress.file.with.known.name.text={0}の再フォーマット
remove.annotation=注釈を削除する
remove.catch='キャッチ...'を削除
remove.else='else ...'を削除
rename.element.family=要素の名前を変更する
rename.file.fix=ファイルの名前を変更
rename.file.reference.family=ファイル参照の名前を変更する
rename.file.reference.text=ファイル参照の名前を{0}に変更
rename.named.element.text='' {0} ''を '' {1} 'に変更してください
rename.public.class.text=クラス '' {0} ''を '' {1} ''に変更
searching.for.implementations=実装の検索...
set.language.level=言語レベルを設定する
set.language.level.to.0=言語レベルを{0}に設定する
static.class.initializer={0}クラス初期化子
status.bar.exit.points.highlighted.message={0} exit {0, choice, 1\#point|2\#points} highlighted (press {1} again to remove the highlighting, Escape to remove all highlighting)
status.bar.highlighted.usages.message={0} {0, choice, 1\#usage|2\#usages} of {1} found (press {2} again to remove the highlighting, Escape to remove all highlighting)
status.bar.highlighted.usages.no.target.message={0} {0, choice, 1\#usage|2\#usages} found (press {2} again to remove the highlighting, Escape to remove all highlighting)
status.bar.highlighted.usages.not.found.message={0}の使用法は見つかりませんでした
status.bar.highlighted.usages.not.found.no.target.message=使用状況が見つかりません
status.bar.overridden.methods.highlighted.message={0} overridden {0, choice, 1\#method|2\#methods} found (press {1} again to remove the highlighting, Escape to remove all highlighting)
surround.with.cast.template=（（型）expr）
surround.with.chooser.title=サラウンドバック
surround.with.dowhile.template=一方を行います
surround.with.for.template=ために
surround.with.if.expression.template=if（expr）{...}
surround.with.if.template=if
surround.with.ifelse.expression.template=if（expr）{...} else {...}
surround.with.ifelse.template=if / else
surround.with.not.instanceof.template=！（expr instanceof Type）
surround.with.not.template=！（expr）
surround.with.parenthesis.template=（expr）
surround.with.runnable.template=ランナブル
surround.with.runtime.type.template=（（RuntimeType）expr）
surround.with.synchronized.template=同期された
surround.with.try.catch.finally.template=try / catch / finally
surround.with.try.catch.incorrect.template.message=キャッチボディの無効なファイルテンプレート！
surround.with.try.catch.incorrect.template.title=サラウンドトライ/キャッチ
surround.with.try.catch.template=試してみる
surround.with.try.finally.template=try / finally
surround.with.while.template=while
template.next.variable.command=[次のコードテンプレート]タブに移動します。
template.previous.variable.command=[前のコードテンプレート]タブに移動します
template.shortcut.custom=カスタム
template.shortcut.enter=入る
template.shortcut.space=スペース
template.shortcut.tab=タブ
templates.dialog.edit.variables.action.move.down=下に移動
templates.dialog.edit.variables.action.move.up=上に移動
templates.dialog.edit.variables.border.title=変数
templates.dialog.edit.variables.table.column.default.value=デフォルト値
templates.dialog.edit.variables.table.column.expression=式
templates.dialog.edit.variables.table.column.name=名
templates.dialog.edit.variables.table.column.skip.if.defined=定義されている場合はスキップ
templates.dialog.edit.variables.title=テンプレート変数の編集
templates.dialog.shortcut.chooser.label=デフォルトで展開する
templates.dialog.table.column.abbreviation=略語
templates.dialog.table.column.active=アクティブ
templates.dialog.table.column.description=説明
templates.no.defined=このコンテキストで定義されたテンプレートはありません
templates.postfix.settings.category.after=Postfix補完呼び出し結果がここに表示されます。
templates.postfix.settings.category.before=The sample code featuring selected template will be shown here.
templates.postfix.settings.category.text=<html><body><font face\="verdana" size\="-1">You have selected the postfix completion language.<br>By clicking the checkbox, you can enable/disable all postfix templates for the language.<br>To enable/disable a postfix template select it inside the group.<br></font></body></html>
templates.select.template.chooser.title=テンプレートを選択
templates.settings.page.title=ライブテンプレート
templates.surround.no.defined=このコンテキストで定義されているサラウンドテンプレートはありません
title.popup.show.coverage=カバレッジスイート
title.remove.coverage.data=カバレッジデータを削除する
under.construction.string=工事中。
unknown.encoding.0=不明なエンコーディング： '' {0} ''
unwrap.anonymous=アンラップ '匿名...'
unwrap.array.initializer=配列の初期化を解除する
unwrap.braces=ブレースの巻き戻し
unwrap.conditional='f'を解除しますか？ 
unwrap.else=アンラップ 'else ...'
unwrap.for=Unwrap 'for ...'
unwrap.if='もし...ならばラップ解除'
unwrap.lambda=ラムダを解除する...
unwrap.popup.title=アンラップ/削除するステートメントを選択する
unwrap.synchronized=Unwrap 'synchronized ...'
unwrap.try=アンラップ '試してください...'
unwrap.while=アンラップ 'while ...'
unwrap.with.placeholder=ラップ解除 '' {0} ''
xml.tag.info.no.attributes=<no attributes>
