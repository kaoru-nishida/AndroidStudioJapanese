add.property=\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0
add.property.dialog.title={0} \u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3059\u308b
property.name.field.label=\u30d7\u30ed\u30d1\u30c6\u30a3\u540d :
property.type.field.label=\u30d7\u30ed\u30d1\u30c6\u30a3\u30bf\u30a4\u30d7 :
create.property.getter.checkbox=\u30d7\u30ed\u30d1\u30c6\u30a3\u30b2\u30c3\u30bf\u30fc\u3092\u4f5c\u6210\u3059\u308b
create.property.setter.checkbox=\u30d7\u30ed\u30d1\u30c6\u30a3\u8a2d\u5b9a\u3092\u4f5c\u6210\u3059\u308b
add.property.to.constructors.checkbox=\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3059\u308b
make.property.final.checkbox=\u30d7\u30ed\u30d1\u30c6\u30a3\u3092final\u306b\u3059\u308b
initialization.expression.checkbox=\u521d\u671f\u5316\u5f0f\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09:
cannot.perform.the.refactoring=\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\n
refactor.j.is.not.licensed=Refactor-J\u306f\u30e9\u30a4\u30bb\u30f3\u30b9\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002
the.caret.should.be.positioned.in.the.class.to.add.to.property.to=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8ffd\u52a0\u3059\u308b\u30af\u30e9\u30b9\u5185\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
class.to.be.add.property.to=\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3059\u308b\u30af\u30e9\u30b9
constructor.calls.to.be.updated.view.descriptor=\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c {0} \u306e\u66f4\u65b0\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059
unable.to.find.the.requested.class=\u8981\u6c42\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093
no.class.found=\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093
search.for.class.text=\u30af\u30e9\u30b9\u3092\u691c\u7d22\u3059\u308b
search.for.class.family.name=\u691c\u7d22\u3059\u308b\u30af\u30e9\u30b9
add.global.library=\u30e9\u30a4\u30d6\u30e9\u30ea\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b
global.library.source=\u30b0\u30ed\u30fc\u30d0\u30eb\u30e9\u30a4\u30d6\u30e9\u30ea : {0}
add.module.dependency=\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b
module.source=\u30e2\u30b8\u30e5\u30fc\u30eb : {0}
project.library.source=\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea : {0}
add.project.library=\u30e9\u30a4\u30d6\u30e9\u30ea\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b
class.found.column.header=\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f
source.column.header=\u30bd\u30fc\u30b9
action.column.header=\u30a2\u30af\u30b7\u30e7\u30f3
class.search.results.title=\u30af\u30e9\u30b9\u691c\u7d22\u306e\u7d50\u679c
extract.class.title=\u62bd\u51fa\u3055\u308c\u305f\u30af\u30e9\u30b9
extract.class.from.label={0} \u304b\u3089\u30af\u30e9\u30b9\u3092\u62bd\u51fa\u3059\u308b
name.for.new.class.label=\u65b0\u3057\u3044\u30af\u30e9\u30b9\u306e\u540d\u524d :
choose.destination.package.label=\u5b9b\u5148\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u9078\u629e
package.for.new.class.label=&Package \u540d :
name.for.wrapper.class.label=\u30af\u30e9\u30b9\u540d :
package.for.wrapper.class.label=\u30d1\u30c3\u30b1\u30fc\u30b8\u540d:
members.to.extract.label=Mem&bers to Extract
generate.array.access.methods.title=\u914d\u5217\u30a2\u30af\u30bb\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u30e1\u30f3\u30d0\u30fc\u3092\u9078\u629e\u3059\u308b
generate.collection.access.methods.title=\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30a2\u30af\u30bb\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u30e1\u30f3\u30d0\u30fc\u3092\u9078\u629e\u3059\u308b
generate.array.methods.undo.string=\u914d\u5217\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b
generate.collection.methods.undo.string=\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b

there.already.exists.a.class.with.the.chosen.name=\u9078\u629e\u3057\u305f\u540d\u524d\u306e\u30af\u30e9\u30b9\u304c\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\u3002
introduce.parameter.object=\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5c0e\u5165\u3059\u308b
introduce.type.parameter=\u30bf\u30a4\u30d7\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0e\u5165\u3059\u308b
the.caret.should.be.positioned.at.on.a.type.to.be.parameterized=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
type.selected.is.not.in.class.context=\u9078\u629e\u3055\u308c\u305f\u30bf\u30a4\u30d7\u306f\u30af\u30e9\u30b9\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u3042\u308a\u307e\u305b\u3093\u3002
type.parameters.can.not.be.introduced.as.type.parameters=\u30bf\u30a4\u30d7\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30bf\u30a4\u30d7\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5c0e\u5165\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
primitive.types.can.not.be.introduced.as.type.parameters=\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u306f\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5c0e\u5165\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002
conflicts.found=\u7af6\u5408\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f
there.are.non.genericizable.instances.of.the.type.you.selected=\u9078\u629e\u3057\u305f\u30bf\u30a4\u30d7\u306e\u975e\u30b8\u30a7\u30cd\u30ea\u30bc\u30fc\u30b7\u30e7\u30f3\u53ef\u80fd\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n
do.you.wish.to.continue=\u7d9a\u884c\u3057\u307e\u3059\u304b\uff1f\n
introduce.type.parameter.title=\u30bf\u30a4\u30d7\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0e\u5165\u3059\u308b
name.for.new.type.parameter.label=\u65b0\u3057\u3044\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d :
the.caret.should.be.positioned.within.a.class.to.be.refactored=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u30af\u30e9\u30b9\u5185\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
push.javadoc.down=Javadoc\u3092\u62bc\u3057\u4e0b\u3052\u308b
the.selected.class.is.an.enumeration=\u9078\u629e\u3055\u308c\u305f\u30af\u30e9\u30b9\u306f\u5217\u6319\u578b\u3067\u3059\u3002
the.selected.class.has.no.overridden.methods.with.javadoc=\u9078\u629e\u3055\u308c\u305f\u30af\u30e9\u30b9\u306b\u306f\u3001javadoc\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u3042\u308a\u307e\u305b\u3093\u3002
push.javadoc.down.title=Javadoc\u3092\u62bc\u3057\u4e0b\u3052\u308b
replace.existing.comments.checkbox=\u65e2\u5b58\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u7f6e\u304d\u63db\u3048\u308b
use.inheritdoc.comments=@inheritdoc \u30b3\u30e1\u30f3\u30c8\u3092\u4f7f\u7528\u3059\u308b
push.javadoc.down.from.label=Javadoc\u306e\u62bc\u3057\u4e0b\u3052\u5143 :
methods.to.copy.javadoc.from=javadoc\u3092\u30b3\u30d4\u30fc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u5143
remove.property=\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u524a\u9664
the.caret.should.be.positioned.at.on.a.property.to.be.removed=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u524a\u9664\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
remove.property.getter.checkbox=\u30d7\u30ed\u30d1\u30c6\u30a3\u30b2\u30c3\u30bf\u30fc\u3092\u524a\u9664\u3059\u308b
remove.property.setter.checkbox=\u30d7\u30ed\u30d1\u30c6\u30a3\u8a2d\u5b9a\u3092\u524a\u9664\u3059\u308b
remove.property.title=\u524a\u9664\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3
remove.property.border=\u30d7\u30ed\u30d1\u30c6\u30a3 {0} \u3092\u524a\u9664
replacement.expression.label=\u7f6e\u63db\u5f0f\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09:
remove.middleman=Middleman\u3092\u524a\u9664
the.caret.should.be.positioned.at.the.name.of.the.field.to.be.refactored=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u540d\u524d\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
field.selected.is.not.used.as.a.delegate=\u9078\u629e\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u305b\u3093\u3002
wrap.return.value=\u6298\u308a\u8fd4\u3057\u623b\u308a\u5024
the.caret.should.be.positioned.at.the.name.of.the.method.to.be.refactored=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30ea\u30b9\u30c8\u306e\u5185\u5074\u3001\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e\u5185\u5074\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
method.selected.returns.void=\u9078\u629e\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306f 'void'\u3092\u8fd4\u3057\u307e\u3059\u3002
constructor.returns.can.not.be.wrapped=\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u306e\u30ea\u30bf\u30fc\u30f3\u306f\u30e9\u30c3\u30d7\u3067\u304d\u307e\u305b\u3093\u3002
wrap.return.value.title=\u6298\u308a\u8fd4\u3057\u623b\u308a\u5024
the.caret.should.be.positioned.at.an.annotation.to.be.refactored.to.be.refactored=\u30ad\u30e3\u30ec\u30c3\u30c8\u306f\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002
pull.annotation.up=\u6ce8\u91c8\u3092\u5f15\u304d\u4e0a\u3052\u308b
pull.annotation.up.title=\u6ce8\u91c8\u3092\u5f15\u304d\u4e0a\u3052\u308b
replace.existing.annotations.checkbox=Replace existing annotations
pull.up.annotation.from.label=Pull up annotation from {0} to:
pull.javadoc.up.title=Pull Javadoc Up
pull.up.javadoc.from.label=Pull up javadoc from {0} to:
methods.to.pull.up.javadoc.from.panel=Methods to pull up javadoc from
remove.type.parameter=Remove Type Parameter
the.caret.should.be.positioned.at.the.name.of.the.type.parameter.to.be.refactored=The caret should be positioned at the name of the type parameter to be refactored.
type.parameter.selected.extends.multiple.types=Type parameter selected extends multiple types.
type.parameter.question.label=Do you wish to remove type parameter {0} and all uses of it?
method.to.wrap.returns.from.label=Method to wrap returns from:
method.whose.return.are.to.wrapped=Method whose return are to wrapped
references.to.be.modified.usage.view=References to be modified {0}
reference=reference
type.parameter.to.be.remove=Type parameter to be remove
references.to.be.changed.usage.view=References to be changed {0}
references.to.be.made.removed.usage.view=References to be made removed {0}
property.to.be.removed=Property to be removed
remove.middleman.field.header=Remove middleman field:
references.to.expose.usage.view=References to expose {0}
retain.all.delegating.methods.radio.button=Retain all delegating methods
remove.middleman.title=Remove Middleman
delete.all.delegating.methods.radio.button=Delete all delegating methods
field.label=Field {0}
delete.delegating.methods.border=Delete delegating methods
make.class.inner.title=Make Class Inner
make.class.an.inner.class.border=Make class {0} an inner class
outer.class.label=Outer class:
choose.destination.class.label=Choose destination class
add.property.command=Add property {0} to {1}
refactor=Refactor
preview=Preview
wrapped.return.command.name=Wrapped return as {0} for {1}{2}{3}()
split.loop.text=Split loop
split.loop.family.name=Split Loop
removed.type.parameter.from.class.command.name=Removed type parameter {0} from class {1}
removed.type.parameter.from.method.command.name=Removed type parameter {0} from method {1}()
remove.property.command.name=Remove property {0}
exposed.delegation.command.name=Exposed delegation to {0}{1}{2}
push.up.javadoc.command.name=Push up Javadoc
javadoced.class=Javadoced class
superclass.methods.to.be.javadoced=Superclass methods to be javadoced
push.annotation.down=Push Annotation Down
0.refactor.j.is.not.licensed={0}Refactor-J is not licensed.
0.the.caret.should.be.positioned.at.an.annotation.to.be.refactored.to.be.refactored={0}The caret should be positioned at an annotation to be refactored to be refactored.
push.down.annotation.command.name=Push down annotation
annotation=Annotation
subclass.elements.to.be.annotated=Subclass elements to be annotated
push.annotation.down.title=Push Annotation Down
pull.up.annotation.command.name=Pull up annotation
superclass.elements.to.be.annotated=Superclass elements to be annotated
pull.javadoc.up=Pull Javadoc Up
pull.up.javadoc.command.name=Pull up Javadoc
merge.loops.text=Merge loops
merge.loops.family.name=Merge Loops
make.class.inner=Make Class Inner
the.caret.should.be.positioned.at.on.a.class.to.be.made.into.an.inner.class=The caret should be positioned at a class to be made into an inner class.
only.outer.classes.and.static.inner.classes.may.be.made.inner=Only outer classes and static inner classes may be made inner.
a.class.can.not.be.made.an.inner.class.of.itself=A class can not be made an inner class of itself.
a.class.can.not.be.made.an.inner.class.of.one.of.it.s.decendents=A class can not be made an inner class of one of it is decendents.
make.class.inner.command.name=Move class {0} inside class {1}
invert.boolean=Invert Boolean
the.caret.should.be.positioned.at.the.name.of.the.variable.or.parameter.to.be.refactored=The caret should be positioned at the name of the variable or parameter to be refactored.
variable.selected.is.not.boolean=Variable selected is not boolean.
invert.boolean.title=Invert boolean
do.you.wish.to.invert.all.uses.of.variable=Do you wish to invert all uses of variable {0}?
parameter.selected.is.not.boolean=Parameter selected is not boolean.
do.you.wish.to.invert.all.uses.of.parameter=Do you wish to invert all uses of parameter {0}?
invert.parameter.command.name=Inverted {0}({1})
invert.variable.command.name=Inverted
variable.to.be.inverted=Variable to be inverted
references.to.be.inverted.0=References to be inverted {0}
parameterize.class.radio.button=Parameterize class {0}
parameterize.method.radio.button=Parameterize method {0}()
genericize.uses.border=Genericize uses of {0}
introduced.type.parameter.command.name=Introduced type {0} as parameter to class {1}
type.parameter.to.be.introduced=Type parameter to be introduced
class.references.to.be.made.inner=Class references to be made inner
references.to.be.made.inner.usage.view=References to be made inner {0}
control.flow.category=Control Flow
other.category=Other
genericize.uses.in.border=Genericize uses of {0} in {1}
extract.class=Extract Class
the.selected.class.is.an.interface=The selected class is an interface.
the.selected.class.is.an.annotation.type=The selected class is an annotation type.
the.refactoring.is.not.supported.on.non.static.inner.classes=The refactoring is not supported on non-static inner classes.
the.selected.class.has.no.members.to.extract=The selected class has no members to extract.
references.to.extract=References to extract
extracting.from.class=Extracting from class:
extracted.class.command.name=Extracted class {0}
method.to.extract.parameters.from.label=Method to extract parameters from
name.for.new.parameter.label=Name for new parameter:
method.selected.has.no.parameters=Method selected has no parameters.
parameters.to.extract.border=Parameters to Extract
parameter=Parameter
your.evaluation.license.for.refactor.j.will.expire.in.less.than.n.days=Your evaluation license for Refactor-J will expire in less than {0} days.\n
refactor.j.licensed.to=Refactor-J licensed to:
can.only.pull.annotations.up.on.methods.parameters.and.classes=Can only pull annotations up on methods, parameters, and classes
can.not.find.any.available.superclasses.for.the.selected.class=Can not find any available superclasses for the selected class
can.not.find.any.available.super.methods.for.the.selected.method=Can not find any available super-methods for the selected method
can.only.push.annotations.down.on.methods.parameters.and.classes=Can only push annotations down on methods, parameters, and classes
can.not.find.any.available.subclasses.for.the.selected.class=Can not find any available subclasses for the selected class
can.not.find.any.available.overriding.methods.for.the.selected.method=Can not find any available overriding methods for the selected method
delete.selected.annotation.checkbox=Delete selected annotation
push.annotation.down.from.label=Push annotation down from:
there.already.exists.an.incompatible.class.with.the.chosen.name=There already exists an incompatible class with the chosen name
weaken.type=Weaken Type
weaken.type.label=Weaken the type of ''{0}'' from {1} to:
weaken.type.command.name=Weaken type
weaken.type.refactoring.is.not.supported.for.primitive.types=Weaken type refactoring is not supported for primitive types
weaken.type.refactoring.is.not.supported.for.arrays=Weaken type refactoring is not supported for arrays
weaken.type.refactoring.is.not.supported.for.type.parameters=Weaken type refactoring is not supported for type parameters
invalid.type.for.weaken.type.refactoring=Invalid type for Weaken Type refactoring
weaken.type.refactoring.is.not.supported.for.constructors=Weaken type refactoring is not supported for constructors
the.selected.type.cannot.be.weakened=The selected type cannot be weakened
the.selected.type.cannot.be.weakened.because.the.method.is.declared.in.a.non.project.class=The selected type cannot be weakened because the method is declared in a non-project class
the.selected.method.cannot.be.wrapped.because.it.is.defined.in.a.non.project.class=The selected method cannot be wrapped because it is defined in a non-project class
existing.wrapper.class.label=Use Existing Parameter Class
select.wrapper.class=Select parameter class
could.not.find.selected.wrapping.class=Could not find selected wrapping class
there.already.exists.a.class.with.the.selected.name=There already exists a class with the selected name
pull.annotation.up.from.label=Pull annotation up from:
convert.equality.disjunction.to.set.contains=Convert Equality Disjunction To Set.contains()
convert.to.set.contains=Convert to Set.contains()
the.caret.should.be.positioned.at.the.name.of.the.variable.parameter.or.method.to.be.refactored=The caret should be positioned at the name of the variable, parameter, or method to be refactored.
convert.to.String.format=Convert to String.format
convert.to.printf=Convert to printf
convert.to.MessageFormat.format=Convert to MessageFormat.format
split.string=Split string
copy.javadoc.to.inheritors=Copy Javadoc to inheritors
copy.javadoc.to.ancestors=Copy Javadoc to ancestors
